/*
* Copyright (c) 2019, FusionAuth, All Rights Reserved
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
* either express or implied. See the License for the specific
* language governing permissions and limitations under the License.
*/

import IRESTClient from "./IRESTClient"
import DefaultRESTClientBuilder from "./DefaultRESTClientBuilder";
import IRESTClientBuilder from "./IRESTClientBuilder";
import ClientResponse from "./ClientResponse";
import {RequestCredentials} from "node-fetch";
import {URLSearchParams} from "url";
import { Agent } from "http";

export class FusionAuthClient {
  public clientBuilder: IRESTClientBuilder = new DefaultRESTClientBuilder();
  public credentials: RequestCredentials;

  constructor(
    public apiKey: string,
    public host: string,
    public tenantId?: string,
    public httpAgent?: Agent
  ) { }

  /**
   * Sets the tenant id, that will be included in the X-FusionAuth-TenantId header.
   *
   * @param {string | null} tenantId The value of the X-FusionAuth-TenantId header.
   * @returns {FusionAuthClient}
   */
  setTenantId(tenantId: string | null): FusionAuthClient {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * Sets whether and how cookies will be sent with each request.
   * 
   * @param value The value that indicates whether and how cookies will be sent.
   * @returns {FusionAuthClient}
   */
  setRequestCredentials(value: RequestCredentials): FusionAuthClient {
    this.credentials = value;
    return this;
  }

  /**
   * Takes an action on a user. The user being actioned is called the "actionee" and the user taking the action is called the
   * "actioner". Both user ids are required in the request object.
   *
   * @param {ActionRequest} request The action request that includes all of the information about the action being taken including
   *    the id of the action, any options and the duration (if applicable).
   * @returns {Promise<ClientResponse<ActionResponse>>}
   */
  actionUser(request: ActionRequest): Promise<ClientResponse<ActionResponse>> {
    return this.start<ActionResponse, Errors>()
        .withUri('/api/user/action')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Adds a user to an existing family. The family id must be specified.
   *
   * @param {UUID} familyId The id of the family.
   * @param {FamilyRequest} request The request object that contains all of the information used to determine which user to add to the family.
   * @returns {Promise<ClientResponse<FamilyResponse>>}
   */
  addUserToFamily(familyId: UUID, request: FamilyRequest): Promise<ClientResponse<FamilyResponse>> {
    return this.start<FamilyResponse, Errors>()
        .withUri('/api/user/family')
        .withUriSegment(familyId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Cancels the user action.
   *
   * @param {UUID} actionId The action id of the action to cancel.
   * @param {ActionRequest} request The action request that contains the information about the cancellation.
   * @returns {Promise<ClientResponse<ActionResponse>>}
   */
  cancelAction(actionId: UUID, request: ActionRequest): Promise<ClientResponse<ActionResponse>> {
    return this.start<ActionResponse, Errors>()
        .withUri('/api/user/action')
        .withUriSegment(actionId)
        .withJSONBody(request)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Changes a user's password using the change password Id. This usually occurs after an email has been sent to the user
   * and they clicked on a link to reset their password.
   *
   * @param {string} changePasswordId The change password Id used to find the user. This value is generated by FusionAuth once the change password workflow has been initiated.
   * @param {ChangePasswordRequest} request The change password request that contains all of the information used to change the password.
   * @returns {Promise<ClientResponse<ChangePasswordResponse>>}
   */
  changePassword(changePasswordId: string, request: ChangePasswordRequest): Promise<ClientResponse<ChangePasswordResponse>> {
    return this.start<ChangePasswordResponse, Errors>()
        .withUri('/api/user/change-password')
        .withUriSegment(changePasswordId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Changes a user's password using their identity (login id and password). Using a loginId instead of the changePasswordId
   * bypasses the email verification and allows a password to be changed directly without first calling the #forgotPassword
   * method.
   *
   * @param {ChangePasswordRequest} request The change password request that contains all of the information used to change the password.
   * @returns {Promise<ClientResponse<void>>}
   */
  changePasswordByIdentity(request: ChangePasswordRequest): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/user/change-password')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Adds a comment to the user's account.
   *
   * @param {UserCommentRequest} request The request object that contains all of the information used to create the user comment.
   * @returns {Promise<ClientResponse<void>>}
   */
  commentOnUser(request: UserCommentRequest): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/user/comment')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates an application. You can optionally specify an Id for the application, if not provided one will be generated.
   *
   * @param {UUID} applicationId (Optional) The Id to use for the application. If not provided a secure random UUID will be generated.
   * @param {ApplicationRequest} request The request object that contains all of the information used to create the application.
   * @returns {Promise<ClientResponse<ApplicationResponse>>}
   */
  createApplication(applicationId: UUID, request: ApplicationRequest): Promise<ClientResponse<ApplicationResponse>> {
    return this.start<ApplicationResponse, Errors>()
        .withUri('/api/application')
        .withUriSegment(applicationId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates a new role for an application. You must specify the id of the application you are creating the role for.
   * You can optionally specify an Id for the role inside the ApplicationRole object itself, if not provided one will be generated.
   *
   * @param {UUID} applicationId The Id of the application to create the role on.
   * @param {UUID} roleId (Optional) The Id of the role. If not provided a secure random UUID will be generated.
   * @param {ApplicationRequest} request The request object that contains all of the information used to create the application role.
   * @returns {Promise<ClientResponse<ApplicationResponse>>}
   */
  createApplicationRole(applicationId: UUID, roleId: UUID, request: ApplicationRequest): Promise<ClientResponse<ApplicationResponse>> {
    return this.start<ApplicationResponse, Errors>()
        .withUri('/api/application')
        .withUriSegment(applicationId)
        .withUriSegment("role")
        .withUriSegment(roleId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates an audit log with the message and user name (usually an email). Audit logs should be written anytime you
   * make changes to the FusionAuth database. When using the FusionAuth App web interface, any changes are automatically
   * written to the audit log. However, if you are accessing the API, you must write the audit logs yourself.
   *
   * @param {AuditLogRequest} request The request object that contains all of the information used to create the audit log entry.
   * @returns {Promise<ClientResponse<AuditLogResponse>>}
   */
  createAuditLog(request: AuditLogRequest): Promise<ClientResponse<AuditLogResponse>> {
    return this.start<AuditLogResponse, Errors>()
        .withUri('/api/system/audit-log')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates a user consent type. You can optionally specify an Id for the consent type, if not provided one will be generated.
   *
   * @param {UUID} consentId (Optional) The Id for the consent. If not provided a secure random UUID will be generated.
   * @param {ConsentRequest} request The request object that contains all of the information used to create the consent.
   * @returns {Promise<ClientResponse<ConsentResponse>>}
   */
  createConsent(consentId: UUID, request: ConsentRequest): Promise<ClientResponse<ConsentResponse>> {
    return this.start<ConsentResponse, Errors>()
        .withUri('/api/consent')
        .withUriSegment(consentId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates an email template. You can optionally specify an Id for the template, if not provided one will be generated.
   *
   * @param {UUID} emailTemplateId (Optional) The Id for the template. If not provided a secure random UUID will be generated.
   * @param {EmailTemplateRequest} request The request object that contains all of the information used to create the email template.
   * @returns {Promise<ClientResponse<EmailTemplateResponse>>}
   */
  createEmailTemplate(emailTemplateId: UUID, request: EmailTemplateRequest): Promise<ClientResponse<EmailTemplateResponse>> {
    return this.start<EmailTemplateResponse, Errors>()
        .withUri('/api/email/template')
        .withUriSegment(emailTemplateId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates a family with the user id in the request as the owner and sole member of the family. You can optionally specify an id for the
   * family, if not provided one will be generated.
   *
   * @param {UUID} familyId (Optional) The id for the family. If not provided a secure random UUID will be generated.
   * @param {FamilyRequest} request The request object that contains all of the information used to create the family.
   * @returns {Promise<ClientResponse<FamilyResponse>>}
   */
  createFamily(familyId: UUID, request: FamilyRequest): Promise<ClientResponse<FamilyResponse>> {
    return this.start<FamilyResponse, Errors>()
        .withUri('/api/user/family')
        .withUriSegment(familyId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates a group. You can optionally specify an Id for the group, if not provided one will be generated.
   *
   * @param {UUID} groupId (Optional) The Id for the group. If not provided a secure random UUID will be generated.
   * @param {GroupRequest} request The request object that contains all of the information used to create the group.
   * @returns {Promise<ClientResponse<GroupResponse>>}
   */
  createGroup(groupId: UUID, request: GroupRequest): Promise<ClientResponse<GroupResponse>> {
    return this.start<GroupResponse, Errors>()
        .withUri('/api/group')
        .withUriSegment(groupId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates a member in a group.
   *
   * @param {MemberRequest} request The request object that contains all of the information used to create the group member(s).
   * @returns {Promise<ClientResponse<MemberResponse>>}
   */
  createGroupMembers(request: MemberRequest): Promise<ClientResponse<MemberResponse>> {
    return this.start<MemberResponse, Errors>()
        .withUri('/api/group/member')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates an identity provider. You can optionally specify an Id for the identity provider, if not provided one will be generated.
   *
   * @param {UUID} identityProviderId (Optional) The Id of the identity provider. If not provided a secure random UUID will be generated.
   * @param {IdentityProviderRequest} request The request object that contains all of the information used to create the identity provider.
   * @returns {Promise<ClientResponse<IdentityProviderResponse>>}
   */
  createIdentityProvider(identityProviderId: UUID, request: IdentityProviderRequest): Promise<ClientResponse<IdentityProviderResponse>> {
    return this.start<IdentityProviderResponse, Errors>()
        .withUri('/api/identity-provider')
        .withUriSegment(identityProviderId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates a Lambda. You can optionally specify an Id for the lambda, if not provided one will be generated.
   *
   * @param {UUID} lambdaId (Optional) The Id for the lambda. If not provided a secure random UUID will be generated.
   * @param {LambdaRequest} request The request object that contains all of the information used to create the lambda.
   * @returns {Promise<ClientResponse<LambdaResponse>>}
   */
  createLambda(lambdaId: UUID, request: LambdaRequest): Promise<ClientResponse<LambdaResponse>> {
    return this.start<LambdaResponse, Errors>()
        .withUri('/api/lambda')
        .withUriSegment(lambdaId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates a tenant. You can optionally specify an Id for the tenant, if not provided one will be generated.
   *
   * @param {UUID} tenantId (Optional) The Id for the tenant. If not provided a secure random UUID will be generated.
   * @param {TenantRequest} request The request object that contains all of the information used to create the tenant.
   * @returns {Promise<ClientResponse<TenantResponse>>}
   */
  createTenant(tenantId: UUID, request: TenantRequest): Promise<ClientResponse<TenantResponse>> {
    return this.start<TenantResponse, Errors>()
        .withUri('/api/tenant')
        .withUriSegment(tenantId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates a Theme. You can optionally specify an Id for the theme, if not provided one will be generated.
   *
   * @param {UUID} themeId (Optional) The Id for the theme. If not provided a secure random UUID will be generated.
   * @param {ThemeRequest} request The request object that contains all of the information used to create the theme.
   * @returns {Promise<ClientResponse<ThemeResponse>>}
   */
  createTheme(themeId: UUID, request: ThemeRequest): Promise<ClientResponse<ThemeResponse>> {
    return this.start<ThemeResponse, Errors>()
        .withUri('/api/theme')
        .withUriSegment(themeId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates a user. You can optionally specify an Id for the user, if not provided one will be generated.
   *
   * @param {UUID} userId (Optional) The Id for the user. If not provided a secure random UUID will be generated.
   * @param {UserRequest} request The request object that contains all of the information used to create the user.
   * @returns {Promise<ClientResponse<UserResponse>>}
   */
  createUser(userId: UUID, request: UserRequest): Promise<ClientResponse<UserResponse>> {
    return this.start<UserResponse, Errors>()
        .withUri('/api/user')
        .withUriSegment(userId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates a user action. This action cannot be taken on a user until this call successfully returns. Anytime after
   * that the user action can be applied to any user.
   *
   * @param {UUID} userActionId (Optional) The Id for the user action. If not provided a secure random UUID will be generated.
   * @param {UserActionRequest} request The request object that contains all of the information used to create the user action.
   * @returns {Promise<ClientResponse<UserActionResponse>>}
   */
  createUserAction(userActionId: UUID, request: UserActionRequest): Promise<ClientResponse<UserActionResponse>> {
    return this.start<UserActionResponse, Errors>()
        .withUri('/api/user-action')
        .withUriSegment(userActionId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates a user reason. This user action reason cannot be used when actioning a user until this call completes
   * successfully. Anytime after that the user action reason can be used.
   *
   * @param {UUID} userActionReasonId (Optional) The Id for the user action reason. If not provided a secure random UUID will be generated.
   * @param {UserActionReasonRequest} request The request object that contains all of the information used to create the user action reason.
   * @returns {Promise<ClientResponse<UserActionReasonResponse>>}
   */
  createUserActionReason(userActionReasonId: UUID, request: UserActionReasonRequest): Promise<ClientResponse<UserActionReasonResponse>> {
    return this.start<UserActionReasonResponse, Errors>()
        .withUri('/api/user-action-reason')
        .withUriSegment(userActionReasonId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates a single User consent.
   *
   * @param {UUID} userConsentId (Optional) The Id for the User consent. If not provided a secure random UUID will be generated.
   * @param {UserConsentRequest} request The request that contains the user consent information.
   * @returns {Promise<ClientResponse<UserConsentResponse>>}
   */
  createUserConsent(userConsentId: UUID, request: UserConsentRequest): Promise<ClientResponse<UserConsentResponse>> {
    return this.start<UserConsentResponse, Errors>()
        .withUri('/api/user/consent')
        .withUriSegment(userConsentId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates a webhook. You can optionally specify an Id for the webhook, if not provided one will be generated.
   *
   * @param {UUID} webhookId (Optional) The Id for the webhook. If not provided a secure random UUID will be generated.
   * @param {WebhookRequest} request The request object that contains all of the information used to create the webhook.
   * @returns {Promise<ClientResponse<WebhookResponse>>}
   */
  createWebhook(webhookId: UUID, request: WebhookRequest): Promise<ClientResponse<WebhookResponse>> {
    return this.start<WebhookResponse, Errors>()
        .withUri('/api/webhook')
        .withUriSegment(webhookId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Deactivates the application with the given Id.
   *
   * @param {UUID} applicationId The Id of the application to deactivate.
   * @returns {Promise<ClientResponse<void>>}
   */
  deactivateApplication(applicationId: UUID): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/application')
        .withUriSegment(applicationId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deactivates the user with the given Id.
   *
   * @param {UUID} userId The Id of the user to deactivate.
   * @returns {Promise<ClientResponse<void>>}
   */
  deactivateUser(userId: UUID): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/user')
        .withUriSegment(userId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deactivates the user action with the given Id.
   *
   * @param {UUID} userActionId The Id of the user action to deactivate.
   * @returns {Promise<ClientResponse<void>>}
   */
  deactivateUserAction(userActionId: UUID): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/user-action')
        .withUriSegment(userActionId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deactivates the users with the given ids.
   *
   * @param {Array<string>} userIds The ids of the users to deactivate.
   * @returns {Promise<ClientResponse<UserDeleteResponse>>}
   *
   * @deprecated This method has been renamed to deactivateUsersByIds, use that method instead.
   */
  deactivateUsers(userIds: Array<string>): Promise<ClientResponse<UserDeleteResponse>> {
    return this.start<UserDeleteResponse, Errors>()
        .withUri('/api/user/bulk')
        .withParameter('userId', userIds)
        .withParameter('dryRun', false)
        .withParameter('hardDelete', false)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deactivates the users with the given ids.
   *
   * @param {Array<string>} userIds The ids of the users to deactivate.
   * @returns {Promise<ClientResponse<UserDeleteResponse>>}
   */
  deactivateUsersByIds(userIds: Array<string>): Promise<ClientResponse<UserDeleteResponse>> {
    return this.start<UserDeleteResponse, Errors>()
        .withUri('/api/user/bulk')
        .withParameter('userId', userIds)
        .withParameter('dryRun', false)
        .withParameter('hardDelete', false)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Hard deletes an application. This is a dangerous operation and should not be used in most circumstances. This will
   * delete the application, any registrations for that application, metrics and reports for the application, all the
   * roles for the application, and any other data associated with the application. This operation could take a very
   * long time, depending on the amount of data in your database.
   *
   * @param {UUID} applicationId The Id of the application to delete.
   * @returns {Promise<ClientResponse<void>>}
   */
  deleteApplication(applicationId: UUID): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/application')
        .withUriSegment(applicationId)
        .withParameter('hardDelete', true)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Hard deletes an application role. This is a dangerous operation and should not be used in most circumstances. This
   * permanently removes the given role from all users that had it.
   *
   * @param {UUID} applicationId The Id of the application to deactivate.
   * @param {UUID} roleId The Id of the role to delete.
   * @returns {Promise<ClientResponse<void>>}
   */
  deleteApplicationRole(applicationId: UUID, roleId: UUID): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/application')
        .withUriSegment(applicationId)
        .withUriSegment("role")
        .withUriSegment(roleId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the consent for the given Id.
   *
   * @param {UUID} consentId The Id of the consent to delete.
   * @returns {Promise<ClientResponse<void>>}
   */
  deleteConsent(consentId: UUID): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/consent')
        .withUriSegment(consentId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the email template for the given Id.
   *
   * @param {UUID} emailTemplateId The Id of the email template to delete.
   * @returns {Promise<ClientResponse<void>>}
   */
  deleteEmailTemplate(emailTemplateId: UUID): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/email/template')
        .withUriSegment(emailTemplateId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the group for the given Id.
   *
   * @param {UUID} groupId The Id of the group to delete.
   * @returns {Promise<ClientResponse<void>>}
   */
  deleteGroup(groupId: UUID): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/group')
        .withUriSegment(groupId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Removes users as members of a group.
   *
   * @param {MemberDeleteRequest} request The member request that contains all of the information used to remove members to the group.
   * @returns {Promise<ClientResponse<void>>}
   */
  deleteGroupMembers(request: MemberDeleteRequest): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/group/member')
        .withJSONBody(request)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the identity provider for the given Id.
   *
   * @param {UUID} identityProviderId The Id of the identity provider to delete.
   * @returns {Promise<ClientResponse<void>>}
   */
  deleteIdentityProvider(identityProviderId: UUID): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/identity-provider')
        .withUriSegment(identityProviderId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the key for the given Id.
   *
   * @param {UUID} keyId The Id of the key to delete.
   * @returns {Promise<ClientResponse<void>>}
   */
  deleteKey(keyId: UUID): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/key')
        .withUriSegment(keyId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the lambda for the given Id.
   *
   * @param {UUID} lambdaId The Id of the lambda to delete.
   * @returns {Promise<ClientResponse<void>>}
   */
  deleteLambda(lambdaId: UUID): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/lambda')
        .withUriSegment(lambdaId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the user registration for the given user and application.
   *
   * @param {UUID} userId The Id of the user whose registration is being deleted.
   * @param {UUID} applicationId The Id of the application to remove the registration for.
   * @returns {Promise<ClientResponse<void>>}
   */
  deleteRegistration(userId: UUID, applicationId: UUID): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/user/registration')
        .withUriSegment(userId)
        .withUriSegment(applicationId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the tenant for the given Id.
   *
   * @param {UUID} tenantId The Id of the tenant to delete.
   * @returns {Promise<ClientResponse<void>>}
   */
  deleteTenant(tenantId: UUID): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/tenant')
        .withUriSegment(tenantId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the theme for the given Id.
   *
   * @param {UUID} themeId The Id of the theme to delete.
   * @returns {Promise<ClientResponse<void>>}
   */
  deleteTheme(themeId: UUID): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/theme')
        .withUriSegment(themeId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the user for the given Id. This permanently deletes all information, metrics, reports and data associated
   * with the user.
   *
   * @param {UUID} userId The Id of the user to delete.
   * @returns {Promise<ClientResponse<void>>}
   */
  deleteUser(userId: UUID): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/user')
        .withUriSegment(userId)
        .withParameter('hardDelete', true)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the user action for the given Id. This permanently deletes the user action and also any history and logs of
   * the action being applied to any users.
   *
   * @param {UUID} userActionId The Id of the user action to delete.
   * @returns {Promise<ClientResponse<void>>}
   */
  deleteUserAction(userActionId: UUID): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/user-action')
        .withUriSegment(userActionId)
        .withParameter('hardDelete', true)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the user action reason for the given Id.
   *
   * @param {UUID} userActionReasonId The Id of the user action reason to delete.
   * @returns {Promise<ClientResponse<void>>}
   */
  deleteUserActionReason(userActionReasonId: UUID): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/user-action-reason')
        .withUriSegment(userActionReasonId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the users with the given ids, or users matching the provided JSON query or queryString.
   * The order of preference is ids, query and then queryString, it is recommended to only provide one of the three for the request.
   * 
   * This method can be used to deactivate or permanently delete (hard-delete) users based upon the hardDelete boolean in the request body.
   * Using the dryRun parameter you may also request the result of the action without actually deleting or deactivating any users.
   *
   * @param {UserDeleteRequest} request The UserDeleteRequest.
   * @returns {Promise<ClientResponse<UserDeleteResponse>>}
   *
   * @deprecated This method has been renamed to deleteUsersByQuery, use that method instead.
   */
  deleteUsers(request: UserDeleteRequest): Promise<ClientResponse<UserDeleteResponse>> {
    return this.start<UserDeleteResponse, Errors>()
        .withUri('/api/user/bulk')
        .withJSONBody(request)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the users with the given ids, or users matching the provided JSON query or queryString.
   * The order of preference is ids, query and then queryString, it is recommended to only provide one of the three for the request.
   * 
   * This method can be used to deactivate or permanently delete (hard-delete) users based upon the hardDelete boolean in the request body.
   * Using the dryRun parameter you may also request the result of the action without actually deleting or deactivating any users.
   *
   * @param {UserDeleteRequest} request The UserDeleteRequest.
   * @returns {Promise<ClientResponse<UserDeleteResponse>>}
   */
  deleteUsersByQuery(request: UserDeleteRequest): Promise<ClientResponse<UserDeleteResponse>> {
    return this.start<UserDeleteResponse, Errors>()
        .withUri('/api/user/bulk')
        .withJSONBody(request)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the webhook for the given Id.
   *
   * @param {UUID} webhookId The Id of the webhook to delete.
   * @returns {Promise<ClientResponse<void>>}
   */
  deleteWebhook(webhookId: UUID): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/webhook')
        .withUriSegment(webhookId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Disable Two Factor authentication for a user.
   *
   * @param {UUID} userId The Id of the User for which you're disabling Two Factor authentication.
   * @param {string} code The Two Factor code used verify the the caller knows the Two Factor secret.
   * @returns {Promise<ClientResponse<void>>}
   */
  disableTwoFactor(userId: UUID, code: string): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/user/two-factor')
        .withParameter('userId', userId)
        .withParameter('code', code)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Enable Two Factor authentication for a user.
   *
   * @param {UUID} userId The Id of the user to enable Two Factor authentication.
   * @param {TwoFactorRequest} request The two factor enable request information.
   * @returns {Promise<ClientResponse<void>>}
   */
  enableTwoFactor(userId: UUID, request: TwoFactorRequest): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/user/two-factor')
        .withUriSegment(userId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Exchanges an OAuth authorization code for an access token.
   * If you will be using the Authorization Code grant, you will make a request to the Token endpoint to exchange the authorization code returned from the Authorize endpoint for an access token.
   *
   * @param {string} code The authorization code returned on the /oauth2/authorize response.
   * @param {string} client_id (Optional) The unique client identifier. The client Id is the Id of the FusionAuth Application in which you you are attempting to authenticate. This parameter is optional when the Authorization header is provided.
   * @param {string} client_secret (Optional) The client secret. This value may optionally be provided in the request body instead of the Authorization header.
   * @param {string} redirect_uri The URI to redirect to upon a successful request.
   * @returns {Promise<ClientResponse<AccessToken>>}
   */
  exchangeOAuthCodeForAccessToken(code: string, client_id: string, client_secret: string, redirect_uri: string): Promise<ClientResponse<AccessToken>> {
    let body = new URLSearchParams();

    body.append('code', code);
    body.append('client_id', client_id);
    body.append('client_secret', client_secret);
    body.append('grant_type', 'authorization_code');
    body.append('redirect_uri', redirect_uri);
    return this.startAnonymous<AccessToken, OAuthError>()
        .withUri('/oauth2/token')
        .withFormData(body)
        .withMethod("POST")
        .go();
  }

  /**
   * Exchange a Refresh Token for an Access Token.
   * If you will be using the Refresh Token Grant, you will make a request to the Token endpoint to exchange the user’s refresh token for an access token.
   *
   * @param {string} refresh_token The refresh token that you would like to use to exchange for an access token.
   * @param {string} client_id (Optional) The unique client identifier. The client Id is the Id of the FusionAuth Application in which you you are attempting to authenticate. This parameter is optional when the Authorization header is provided.
   * @param {string} client_secret (Optional) The client secret. This value may optionally be provided in the request body instead of the Authorization header.
   * @param {string} scope (Optional) This parameter is optional and if omitted, the same scope requested during the authorization request will be used. If provided the scopes must match those requested during the initial authorization request.
   * @param {string} user_code (Optional) The end-user verification code. This code is required if using this endpoint to approve the Device Authorization.
   * @returns {Promise<ClientResponse<AccessToken>>}
   */
  exchangeRefreshTokenForAccessToken(refresh_token: string, client_id: string, client_secret: string, scope: string, user_code: string): Promise<ClientResponse<AccessToken>> {
    let body = new URLSearchParams();

    body.append('refresh_token', refresh_token);
    body.append('client_id', client_id);
    body.append('client_secret', client_secret);
    body.append('grant_type', 'refresh_token');
    body.append('scope', scope);
    body.append('user_code', user_code);
    return this.startAnonymous<AccessToken, OAuthError>()
        .withUri('/oauth2/token')
        .withFormData(body)
        .withMethod("POST")
        .go();
  }

  /**
   * Exchange a refresh token for a new JWT.
   *
   * @param {RefreshRequest} request The refresh request.
   * @returns {Promise<ClientResponse<RefreshResponse>>}
   */
  exchangeRefreshTokenForJWT(request: RefreshRequest): Promise<ClientResponse<RefreshResponse>> {
    return this.startAnonymous<RefreshResponse, Errors>()
        .withUri('/api/jwt/refresh')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Exchange User Credentials for a Token.
   * If you will be using the Resource Owner Password Credential Grant, you will make a request to the Token endpoint to exchange the user’s email and password for an access token.
   *
   * @param {string} username The login identifier of the user. The login identifier can be either the email or the username.
   * @param {string} password The user’s password.
   * @param {string} client_id (Optional) The unique client identifier. The client Id is the Id of the FusionAuth Application in which you you are attempting to authenticate. This parameter is optional when the Authorization header is provided.
   * @param {string} client_secret (Optional) The client secret. This value may optionally be provided in the request body instead of the Authorization header.
   * @param {string} scope (Optional) This parameter is optional and if omitted, the same scope requested during the authorization request will be used. If provided the scopes must match those requested during the initial authorization request.
   * @param {string} user_code (Optional) The end-user verification code. This code is required if using this endpoint to approve the Device Authorization.
   * @returns {Promise<ClientResponse<AccessToken>>}
   */
  exchangeUserCredentialsForAccessToken(username: string, password: string, client_id: string, client_secret: string, scope: string, user_code: string): Promise<ClientResponse<AccessToken>> {
    let body = new URLSearchParams();

    body.append('username', username);
    body.append('password', password);
    body.append('client_id', client_id);
    body.append('client_secret', client_secret);
    body.append('grant_type', 'password');
    body.append('scope', scope);
    body.append('user_code', user_code);
    return this.startAnonymous<AccessToken, OAuthError>()
        .withUri('/oauth2/token')
        .withFormData(body)
        .withMethod("POST")
        .go();
  }

  /**
   * Begins the forgot password sequence, which kicks off an email to the user so that they can reset their password.
   *
   * @param {ForgotPasswordRequest} request The request that contains the information about the user so that they can be emailed.
   * @returns {Promise<ClientResponse<ForgotPasswordResponse>>}
   */
  forgotPassword(request: ForgotPasswordRequest): Promise<ClientResponse<ForgotPasswordResponse>> {
    return this.start<ForgotPasswordResponse, Errors>()
        .withUri('/api/user/forgot-password')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Generate a new Email Verification Id to be used with the Verify Email API. This API will not attempt to send an
   * email to the User. This API may be used to collect the verificationId for use with a third party system.
   *
   * @param {string} email The email address of the user that needs a new verification email.
   * @returns {Promise<ClientResponse<VerifyEmailResponse>>}
   */
  generateEmailVerificationId(email: string): Promise<ClientResponse<VerifyEmailResponse>> {
    return this.start<VerifyEmailResponse, void>()
        .withUri('/api/user/verify-email')
        .withParameter('email', email)
        .withParameter('sendVerifyEmail', false)
        .withMethod("PUT")
        .go();
  }

  /**
   * Generate a new RSA or EC key pair or an HMAC secret.
   *
   * @param {UUID} keyId (Optional) The Id for the key. If not provided a secure random UUID will be generated.
   * @param {KeyRequest} request The request object that contains all of the information used to create the key.
   * @returns {Promise<ClientResponse<KeyResponse>>}
   */
  generateKey(keyId: UUID, request: KeyRequest): Promise<ClientResponse<KeyResponse>> {
    return this.start<KeyResponse, Errors>()
        .withUri('/api/key/generate')
        .withUriSegment(keyId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Generate a new Application Registration Verification Id to be used with the Verify Registration API. This API will not attempt to send an
   * email to the User. This API may be used to collect the verificationId for use with a third party system.
   *
   * @param {string} email The email address of the user that needs a new verification email.
   * @param {UUID} applicationId The Id of the application to be verified.
   * @returns {Promise<ClientResponse<VerifyRegistrationResponse>>}
   */
  generateRegistrationVerificationId(email: string, applicationId: UUID): Promise<ClientResponse<VerifyRegistrationResponse>> {
    return this.start<VerifyRegistrationResponse, void>()
        .withUri('/api/user/verify-registration')
        .withParameter('email', email)
        .withParameter('sendVerifyPasswordEmail', false)
        .withParameter('applicationId', applicationId)
        .withMethod("PUT")
        .go();
  }

  /**
   * Generate a Two Factor secret that can be used to enable Two Factor authentication for a User. The response will contain
   * both the secret and a Base32 encoded form of the secret which can be shown to a User when using a 2 Step Authentication
   * application such as Google Authenticator.
   *
   * @returns {Promise<ClientResponse<SecretResponse>>}
   */
  generateTwoFactorSecret(): Promise<ClientResponse<SecretResponse>> {
    return this.start<SecretResponse, void>()
        .withUri('/api/two-factor/secret')
        .withMethod("GET")
        .go();
  }

  /**
   * Generate a Two Factor secret that can be used to enable Two Factor authentication for a User. The response will contain
   * both the secret and a Base32 encoded form of the secret which can be shown to a User when using a 2 Step Authentication
   * application such as Google Authenticator.
   *
   * @param {string} encodedJWT The encoded JWT (access token).
   * @returns {Promise<ClientResponse<SecretResponse>>}
   */
  generateTwoFactorSecretUsingJWT(encodedJWT: string): Promise<ClientResponse<SecretResponse>> {
    return this.start<SecretResponse, void>()
        .withUri('/api/two-factor/secret')
        .withAuthorization('JWT ' + encodedJWT)
        .withMethod("GET")
        .go();
  }

  /**
   * Handles login via third-parties including Social login, external OAuth and OpenID Connect, and other
   * login systems.
   *
   * @param {IdentityProviderLoginRequest} request The third-party login request that contains information from the third-party login
   *    providers that FusionAuth uses to reconcile the user's account.
   * @returns {Promise<ClientResponse<LoginResponse>>}
   */
  identityProviderLogin(request: IdentityProviderLoginRequest): Promise<ClientResponse<LoginResponse>> {
    return this.startAnonymous<LoginResponse, Errors>()
        .withUri('/api/identity-provider/login')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Import an existing RSA or EC key pair or an HMAC secret.
   *
   * @param {UUID} keyId (Optional) The Id for the key. If not provided a secure random UUID will be generated.
   * @param {KeyRequest} request The request object that contains all of the information used to create the key.
   * @returns {Promise<ClientResponse<KeyResponse>>}
   */
  importKey(keyId: UUID, request: KeyRequest): Promise<ClientResponse<KeyResponse>> {
    return this.start<KeyResponse, Errors>()
        .withUri('/api/key/import')
        .withUriSegment(keyId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Bulk imports multiple users. This does some validation, but then tries to run batch inserts of users. This reduces
   * latency when inserting lots of users. Therefore, the error response might contain some information about failures,
   * but it will likely be pretty generic.
   *
   * @param {ImportRequest} request The request that contains all of the information about all of the users to import.
   * @returns {Promise<ClientResponse<void>>}
   */
  importUsers(request: ImportRequest): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/user/import')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Issue a new access token (JWT) for the requested Application after ensuring the provided JWT is valid. A valid
   * access token is properly signed and not expired.
   * <p>
   * This API may be used in an SSO configuration to issue new tokens for another application after the user has
   * obtained a valid token from authentication.
   *
   * @param {UUID} applicationId The Application Id for which you are requesting a new access token be issued.
   * @param {string} encodedJWT The encoded JWT (access token).
   * @param {string} refreshToken (Optional) An existing refresh token used to request a refresh token in addition to a JWT in the response.
   *    <p>The target application represented by the applicationid request parameter must have refresh 
   *    tokens enabled in order to receive a refresh token in the response.</p>
   * @returns {Promise<ClientResponse<IssueResponse>>}
   */
  issueJWT(applicationId: UUID, encodedJWT: string, refreshToken: string): Promise<ClientResponse<IssueResponse>> {
    return this.start<IssueResponse, Errors>()
        .withUri('/api/jwt/issue')
        .withAuthorization('JWT ' + encodedJWT)
        .withParameter('applicationId', applicationId)
        .withParameter('refreshToken', refreshToken)
        .withMethod("GET")
        .go();
  }

  /**
   * Authenticates a user to FusionAuth. 
   * 
   * This API optionally requires an API key. See <code>Application.loginConfiguration.requireAuthentication</code>.
   *
   * @param {LoginRequest} request The login request that contains the user credentials used to log them in.
   * @returns {Promise<ClientResponse<LoginResponse>>}
   */
  login(request: LoginRequest): Promise<ClientResponse<LoginResponse>> {
    return this.start<LoginResponse, Errors>()
        .withUri('/api/login')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Sends a ping to FusionAuth indicating that the user was automatically logged into an application. When using
   * FusionAuth's SSO or your own, you should call this if the user is already logged in centrally, but accesses an
   * application where they no longer have a session. This helps correctly track login counts, times and helps with
   * reporting.
   *
   * @param {UUID} userId The Id of the user that was logged in.
   * @param {UUID} applicationId The Id of the application that they logged into.
   * @param {string} callerIPAddress (Optional) The IP address of the end-user that is logging in. If a null value is provided
   *    the IP address will be that of the client or last proxy that sent the request.
   * @returns {Promise<ClientResponse<void>>}
   */
  loginPing(userId: UUID, applicationId: UUID, callerIPAddress: string): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/login')
        .withUriSegment(userId)
        .withUriSegment(applicationId)
        .withParameter('ipAddress', callerIPAddress)
        .withMethod("PUT")
        .go();
  }

  /**
   * The Logout API is intended to be used to remove the refresh token and access token cookies if they exist on the
   * client and revoke the refresh token stored. This API does nothing if the request does not contain an access
   * token or refresh token cookies.
   *
   * @param {boolean} global When this value is set to true all of the refresh tokens issued to the owner of the
   *    provided token will be revoked.
   * @param {string} refreshToken (Optional) The refresh_token as a request parameter instead of coming in via a cookie.
   *    If provided this takes precedence over the cookie.
   * @returns {Promise<ClientResponse<void>>}
   */
  logout(global: boolean, refreshToken: string): Promise<ClientResponse<void>> {
    return this.startAnonymous<void, void>()
        .withHeader('Content-Type', 'text/plain')
        .withUri('/api/logout')
        .withParameter('global', global)
        .withParameter('refreshToken', refreshToken)
        .withMethod("POST")
        .go();
  }

  /**
   * Retrieves the identity provider for the given domain. A 200 response code indicates the domain is managed
   * by a registered identity provider. A 404 indicates the domain is not managed.
   *
   * @param {string} domain The domain or email address to lookup.
   * @returns {Promise<ClientResponse<LookupResponse>>}
   */
  lookupIdentityProvider(domain: string): Promise<ClientResponse<LookupResponse>> {
    return this.start<LookupResponse, void>()
        .withUri('/api/identity-provider/lookup')
        .withParameter('domain', domain)
        .withMethod("GET")
        .go();
  }

  /**
   * Modifies a temporal user action by changing the expiration of the action and optionally adding a comment to the
   * action.
   *
   * @param {UUID} actionId The Id of the action to modify. This is technically the user action log id.
   * @param {ActionRequest} request The request that contains all of the information about the modification.
   * @returns {Promise<ClientResponse<ActionResponse>>}
   */
  modifyAction(actionId: UUID, request: ActionRequest): Promise<ClientResponse<ActionResponse>> {
    return this.start<ActionResponse, Errors>()
        .withUri('/api/user/action')
        .withUriSegment(actionId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Complete a login request using a passwordless code
   *
   * @param {PasswordlessLoginRequest} request The passwordless login request that contains all of the information used to complete login.
   * @returns {Promise<ClientResponse<LoginResponse>>}
   */
  passwordlessLogin(request: PasswordlessLoginRequest): Promise<ClientResponse<LoginResponse>> {
    return this.startAnonymous<LoginResponse, Errors>()
        .withUri('/api/passwordless/login')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Updates, via PATCH, the application with the given Id.
   *
   * @param {UUID} applicationId The Id of the application to update.
   * @param {ApplicationRequest} request The request that contains just the new application information.
   * @returns {Promise<ClientResponse<ApplicationResponse>>}
   */
  patchApplication(applicationId: UUID, request: ApplicationRequest): Promise<ClientResponse<ApplicationResponse>> {
    return this.start<ApplicationResponse, Errors>()
        .withUri('/api/application')
        .withUriSegment(applicationId)
        .withJSONBody(request)
        .withMethod("PATCH")
        .go();
  }

  /**
   * Updates, via PATCH, the application role with the given id for the application.
   *
   * @param {UUID} applicationId The Id of the application that the role belongs to.
   * @param {UUID} roleId The Id of the role to update.
   * @param {ApplicationRequest} request The request that contains just the new role information.
   * @returns {Promise<ClientResponse<ApplicationResponse>>}
   */
  patchApplicationRole(applicationId: UUID, roleId: UUID, request: ApplicationRequest): Promise<ClientResponse<ApplicationResponse>> {
    return this.start<ApplicationResponse, Errors>()
        .withUri('/api/application')
        .withUriSegment(applicationId)
        .withUriSegment("role")
        .withUriSegment(roleId)
        .withJSONBody(request)
        .withMethod("PATCH")
        .go();
  }

  /**
   * Updates, via PATCH, the consent with the given Id.
   *
   * @param {UUID} consentId The Id of the consent to update.
   * @param {ConsentRequest} request The request that contains just the new consent information.
   * @returns {Promise<ClientResponse<ConsentResponse>>}
   */
  patchConsent(consentId: UUID, request: ConsentRequest): Promise<ClientResponse<ConsentResponse>> {
    return this.start<ConsentResponse, Errors>()
        .withUri('/api/consent')
        .withUriSegment(consentId)
        .withJSONBody(request)
        .withMethod("PATCH")
        .go();
  }

  /**
   * Updates, via PATCH, the email template with the given Id.
   *
   * @param {UUID} emailTemplateId The Id of the email template to update.
   * @param {EmailTemplateRequest} request The request that contains just the new email template information.
   * @returns {Promise<ClientResponse<EmailTemplateResponse>>}
   */
  patchEmailTemplate(emailTemplateId: UUID, request: EmailTemplateRequest): Promise<ClientResponse<EmailTemplateResponse>> {
    return this.start<EmailTemplateResponse, Errors>()
        .withUri('/api/email/template')
        .withUriSegment(emailTemplateId)
        .withJSONBody(request)
        .withMethod("PATCH")
        .go();
  }

  /**
   * Updates, via PATCH, the group with the given Id.
   *
   * @param {UUID} groupId The Id of the group to update.
   * @param {GroupRequest} request The request that contains just the new group information.
   * @returns {Promise<ClientResponse<GroupResponse>>}
   */
  patchGroup(groupId: UUID, request: GroupRequest): Promise<ClientResponse<GroupResponse>> {
    return this.start<GroupResponse, Errors>()
        .withUri('/api/group')
        .withUriSegment(groupId)
        .withJSONBody(request)
        .withMethod("PATCH")
        .go();
  }

  /**
   * Updates, via PATCH, the identity provider with the given Id.
   *
   * @param {UUID} identityProviderId The Id of the identity provider to update.
   * @param {IdentityProviderRequest} request The request object that contains just the updated identity provider information.
   * @returns {Promise<ClientResponse<IdentityProviderResponse>>}
   */
  patchIdentityProvider(identityProviderId: UUID, request: IdentityProviderRequest): Promise<ClientResponse<IdentityProviderResponse>> {
    return this.start<IdentityProviderResponse, Errors>()
        .withUri('/api/identity-provider')
        .withUriSegment(identityProviderId)
        .withJSONBody(request)
        .withMethod("PATCH")
        .go();
  }

  /**
   * Updates, via PATCH, the available integrations.
   *
   * @param {IntegrationRequest} request The request that contains just the new integration information.
   * @returns {Promise<ClientResponse<IntegrationResponse>>}
   */
  patchIntegrations(request: IntegrationRequest): Promise<ClientResponse<IntegrationResponse>> {
    return this.start<IntegrationResponse, Errors>()
        .withUri('/api/integration')
        .withJSONBody(request)
        .withMethod("PATCH")
        .go();
  }

  /**
   * Updates, via PATCH, the lambda with the given Id.
   *
   * @param {UUID} lambdaId The Id of the lambda to update.
   * @param {LambdaRequest} request The request that contains just the new lambda information.
   * @returns {Promise<ClientResponse<LambdaResponse>>}
   */
  patchLambda(lambdaId: UUID, request: LambdaRequest): Promise<ClientResponse<LambdaResponse>> {
    return this.start<LambdaResponse, Errors>()
        .withUri('/api/lambda')
        .withUriSegment(lambdaId)
        .withJSONBody(request)
        .withMethod("PATCH")
        .go();
  }

  /**
   * Updates, via PATCH, the registration for the user with the given id and the application defined in the request.
   *
   * @param {UUID} userId The Id of the user whose registration is going to be updated.
   * @param {RegistrationRequest} request The request that contains just the new registration information.
   * @returns {Promise<ClientResponse<RegistrationResponse>>}
   */
  patchRegistration(userId: UUID, request: RegistrationRequest): Promise<ClientResponse<RegistrationResponse>> {
    return this.start<RegistrationResponse, Errors>()
        .withUri('/api/user/registration')
        .withUriSegment(userId)
        .withJSONBody(request)
        .withMethod("PATCH")
        .go();
  }

  /**
   * Updates, via PATCH, the system configuration.
   *
   * @param {SystemConfigurationRequest} request The request that contains just the new system configuration information.
   * @returns {Promise<ClientResponse<SystemConfigurationResponse>>}
   */
  patchSystemConfiguration(request: SystemConfigurationRequest): Promise<ClientResponse<SystemConfigurationResponse>> {
    return this.start<SystemConfigurationResponse, Errors>()
        .withUri('/api/system-configuration')
        .withJSONBody(request)
        .withMethod("PATCH")
        .go();
  }

  /**
   * Updates, via PATCH, the tenant with the given Id.
   *
   * @param {UUID} tenantId The Id of the tenant to update.
   * @param {TenantRequest} request The request that contains just the new tenant information.
   * @returns {Promise<ClientResponse<TenantResponse>>}
   */
  patchTenant(tenantId: UUID, request: TenantRequest): Promise<ClientResponse<TenantResponse>> {
    return this.start<TenantResponse, Errors>()
        .withUri('/api/tenant')
        .withUriSegment(tenantId)
        .withJSONBody(request)
        .withMethod("PATCH")
        .go();
  }

  /**
   * Updates, via PATCH, the theme with the given Id.
   *
   * @param {UUID} themeId The Id of the theme to update.
   * @param {ThemeRequest} request The request that contains just the new theme information.
   * @returns {Promise<ClientResponse<ThemeResponse>>}
   */
  patchTheme(themeId: UUID, request: ThemeRequest): Promise<ClientResponse<ThemeResponse>> {
    return this.start<ThemeResponse, Errors>()
        .withUri('/api/theme')
        .withUriSegment(themeId)
        .withJSONBody(request)
        .withMethod("PATCH")
        .go();
  }

  /**
   * Updates, via PATCH, the user with the given Id.
   *
   * @param {UUID} userId The Id of the user to update.
   * @param {UserRequest} request The request that contains just the new user information.
   * @returns {Promise<ClientResponse<UserResponse>>}
   */
  patchUser(userId: UUID, request: UserRequest): Promise<ClientResponse<UserResponse>> {
    return this.start<UserResponse, Errors>()
        .withUri('/api/user')
        .withUriSegment(userId)
        .withJSONBody(request)
        .withMethod("PATCH")
        .go();
  }

  /**
   * Updates, via PATCH, the user action with the given Id.
   *
   * @param {UUID} userActionId The Id of the user action to update.
   * @param {UserActionRequest} request The request that contains just the new user action information.
   * @returns {Promise<ClientResponse<UserActionResponse>>}
   */
  patchUserAction(userActionId: UUID, request: UserActionRequest): Promise<ClientResponse<UserActionResponse>> {
    return this.start<UserActionResponse, Errors>()
        .withUri('/api/user-action')
        .withUriSegment(userActionId)
        .withJSONBody(request)
        .withMethod("PATCH")
        .go();
  }

  /**
   * Updates, via PATCH, the user action reason with the given Id.
   *
   * @param {UUID} userActionReasonId The Id of the user action reason to update.
   * @param {UserActionReasonRequest} request The request that contains just the new user action reason information.
   * @returns {Promise<ClientResponse<UserActionReasonResponse>>}
   */
  patchUserActionReason(userActionReasonId: UUID, request: UserActionReasonRequest): Promise<ClientResponse<UserActionReasonResponse>> {
    return this.start<UserActionReasonResponse, Errors>()
        .withUri('/api/user-action-reason')
        .withUriSegment(userActionReasonId)
        .withJSONBody(request)
        .withMethod("PATCH")
        .go();
  }

  /**
   * Updates, via PATCH, a single User consent by Id.
   *
   * @param {UUID} userConsentId The User Consent Id
   * @param {UserConsentRequest} request The request that contains just the new user consent information.
   * @returns {Promise<ClientResponse<UserConsentResponse>>}
   */
  patchUserConsent(userConsentId: UUID, request: UserConsentRequest): Promise<ClientResponse<UserConsentResponse>> {
    return this.start<UserConsentResponse, Errors>()
        .withUri('/api/user/consent')
        .withUriSegment(userConsentId)
        .withJSONBody(request)
        .withMethod("PATCH")
        .go();
  }

  /**
   * Reactivates the application with the given Id.
   *
   * @param {UUID} applicationId The Id of the application to reactivate.
   * @returns {Promise<ClientResponse<ApplicationResponse>>}
   */
  reactivateApplication(applicationId: UUID): Promise<ClientResponse<ApplicationResponse>> {
    return this.start<ApplicationResponse, Errors>()
        .withUri('/api/application')
        .withUriSegment(applicationId)
        .withParameter('reactivate', true)
        .withMethod("PUT")
        .go();
  }

  /**
   * Reactivates the user with the given Id.
   *
   * @param {UUID} userId The Id of the user to reactivate.
   * @returns {Promise<ClientResponse<UserResponse>>}
   */
  reactivateUser(userId: UUID): Promise<ClientResponse<UserResponse>> {
    return this.start<UserResponse, Errors>()
        .withUri('/api/user')
        .withUriSegment(userId)
        .withParameter('reactivate', true)
        .withMethod("PUT")
        .go();
  }

  /**
   * Reactivates the user action with the given Id.
   *
   * @param {UUID} userActionId The Id of the user action to reactivate.
   * @returns {Promise<ClientResponse<UserActionResponse>>}
   */
  reactivateUserAction(userActionId: UUID): Promise<ClientResponse<UserActionResponse>> {
    return this.start<UserActionResponse, Errors>()
        .withUri('/api/user-action')
        .withUriSegment(userActionId)
        .withParameter('reactivate', true)
        .withMethod("PUT")
        .go();
  }

  /**
   * Reconcile a User to FusionAuth using JWT issued from another Identity Provider.
   *
   * @param {IdentityProviderLoginRequest} request The reconcile request that contains the data to reconcile the User.
   * @returns {Promise<ClientResponse<LoginResponse>>}
   */
  reconcileJWT(request: IdentityProviderLoginRequest): Promise<ClientResponse<LoginResponse>> {
    return this.startAnonymous<LoginResponse, Errors>()
        .withUri('/api/jwt/reconcile')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Request a refresh of the User search index. This API is not generally necessary and the search index will become consistent in a
   * reasonable amount of time. There may be scenarios where you may wish to manually request an index refresh. One example may be 
   * if you are using the Search API or Delete Tenant API immediately following a User Create etc, you may wish to request a refresh to
   *  ensure the index immediately current before making a query request to the search index.
   *
   * @returns {Promise<ClientResponse<void>>}
   */
  refreshUserSearchIndex(): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/user/search')
        .withMethod("PUT")
        .go();
  }

  /**
   * Registers a user for an application. If you provide the User and the UserRegistration object on this request, it
   * will create the user as well as register them for the application. This is called a Full Registration. However, if
   * you only provide the UserRegistration object, then the user must already exist and they will be registered for the
   * application. The user id can also be provided and it will either be used to look up an existing user or it will be
   * used for the newly created User.
   *
   * @param {UUID} userId (Optional) The Id of the user being registered for the application and optionally created.
   * @param {RegistrationRequest} request The request that optionally contains the User and must contain the UserRegistration.
   * @returns {Promise<ClientResponse<RegistrationResponse>>}
   */
  register(userId: UUID, request: RegistrationRequest): Promise<ClientResponse<RegistrationResponse>> {
    return this.start<RegistrationResponse, Errors>()
        .withUri('/api/user/registration')
        .withUriSegment(userId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Removes a user from the family with the given id.
   *
   * @param {UUID} familyId The id of the family to remove the user from.
   * @param {UUID} userId The id of the user to remove from the family.
   * @returns {Promise<ClientResponse<void>>}
   */
  removeUserFromFamily(familyId: UUID, userId: UUID): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/user/family')
        .withUriSegment(familyId)
        .withUriSegment(userId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Re-sends the verification email to the user.
   *
   * @param {string} email The email address of the user that needs a new verification email.
   * @returns {Promise<ClientResponse<VerifyEmailResponse>>}
   */
  resendEmailVerification(email: string): Promise<ClientResponse<VerifyEmailResponse>> {
    return this.start<VerifyEmailResponse, Errors>()
        .withUri('/api/user/verify-email')
        .withParameter('email', email)
        .withMethod("PUT")
        .go();
  }

  /**
   * Re-sends the application registration verification email to the user.
   *
   * @param {string} email The email address of the user that needs a new verification email.
   * @param {UUID} applicationId The Id of the application to be verified.
   * @returns {Promise<ClientResponse<VerifyRegistrationResponse>>}
   */
  resendRegistrationVerification(email: string, applicationId: UUID): Promise<ClientResponse<VerifyRegistrationResponse>> {
    return this.start<VerifyRegistrationResponse, Errors>()
        .withUri('/api/user/verify-registration')
        .withParameter('email', email)
        .withParameter('applicationId', applicationId)
        .withMethod("PUT")
        .go();
  }

  /**
   * Retrieves a single action log (the log of a user action that was taken on a user previously) for the given Id.
   *
   * @param {UUID} actionId The Id of the action to retrieve.
   * @returns {Promise<ClientResponse<ActionResponse>>}
   */
  retrieveAction(actionId: UUID): Promise<ClientResponse<ActionResponse>> {
    return this.start<ActionResponse, Errors>()
        .withUri('/api/user/action')
        .withUriSegment(actionId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the actions for the user with the given Id. This will return all time based actions that are active,
   * and inactive as well as non-time based actions.
   *
   * @param {UUID} userId The Id of the user to fetch the actions for.
   * @returns {Promise<ClientResponse<ActionResponse>>}
   */
  retrieveActions(userId: UUID): Promise<ClientResponse<ActionResponse>> {
    return this.start<ActionResponse, Errors>()
        .withUri('/api/user/action')
        .withParameter('userId', userId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the actions for the user with the given Id that are currently preventing the User from logging in.
   *
   * @param {UUID} userId The Id of the user to fetch the actions for.
   * @returns {Promise<ClientResponse<ActionResponse>>}
   */
  retrieveActionsPreventingLogin(userId: UUID): Promise<ClientResponse<ActionResponse>> {
    return this.start<ActionResponse, Errors>()
        .withUri('/api/user/action')
        .withParameter('userId', userId)
        .withParameter('preventingLogin', true)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the actions for the user with the given Id that are currently active.
   * An active action means one that is time based and has not been canceled, and has not ended.
   *
   * @param {UUID} userId The Id of the user to fetch the actions for.
   * @returns {Promise<ClientResponse<ActionResponse>>}
   */
  retrieveActiveActions(userId: UUID): Promise<ClientResponse<ActionResponse>> {
    return this.start<ActionResponse, Errors>()
        .withUri('/api/user/action')
        .withParameter('userId', userId)
        .withParameter('active', true)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the application for the given id or all of the applications if the id is null.
   *
   * @param {UUID} applicationId (Optional) The application id.
   * @returns {Promise<ClientResponse<ApplicationResponse>>}
   */
  retrieveApplication(applicationId: UUID): Promise<ClientResponse<ApplicationResponse>> {
    return this.start<ApplicationResponse, void>()
        .withUri('/api/application')
        .withUriSegment(applicationId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the applications.
   *
   * @returns {Promise<ClientResponse<ApplicationResponse>>}
   */
  retrieveApplications(): Promise<ClientResponse<ApplicationResponse>> {
    return this.start<ApplicationResponse, void>()
        .withUri('/api/application')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves a single audit log for the given Id.
   *
   * @param {number} auditLogId The Id of the audit log to retrieve.
   * @returns {Promise<ClientResponse<AuditLogResponse>>}
   */
  retrieveAuditLog(auditLogId: number): Promise<ClientResponse<AuditLogResponse>> {
    return this.start<AuditLogResponse, Errors>()
        .withUri('/api/system/audit-log')
        .withUriSegment(auditLogId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the Consent for the given Id.
   *
   * @param {UUID} consentId The Id of the consent.
   * @returns {Promise<ClientResponse<ConsentResponse>>}
   */
  retrieveConsent(consentId: UUID): Promise<ClientResponse<ConsentResponse>> {
    return this.start<ConsentResponse, void>()
        .withUri('/api/consent')
        .withUriSegment(consentId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the consent.
   *
   * @returns {Promise<ClientResponse<ConsentResponse>>}
   */
  retrieveConsents(): Promise<ClientResponse<ConsentResponse>> {
    return this.start<ConsentResponse, void>()
        .withUri('/api/consent')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the daily active user report between the two instants. If you specify an application id, it will only
   * return the daily active counts for that application.
   *
   * @param {UUID} applicationId (Optional) The application id.
   * @param {number} start The start instant as UTC milliseconds since Epoch.
   * @param {number} end The end instant as UTC milliseconds since Epoch.
   * @returns {Promise<ClientResponse<DailyActiveUserReportResponse>>}
   */
  retrieveDailyActiveReport(applicationId: UUID, start: number, end: number): Promise<ClientResponse<DailyActiveUserReportResponse>> {
    return this.start<DailyActiveUserReportResponse, Errors>()
        .withUri('/api/report/daily-active-user')
        .withParameter('applicationId', applicationId)
        .withParameter('start', start)
        .withParameter('end', end)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the email template for the given Id. If you don't specify the id, this will return all of the email templates.
   *
   * @param {UUID} emailTemplateId (Optional) The Id of the email template.
   * @returns {Promise<ClientResponse<EmailTemplateResponse>>}
   */
  retrieveEmailTemplate(emailTemplateId: UUID): Promise<ClientResponse<EmailTemplateResponse>> {
    return this.start<EmailTemplateResponse, void>()
        .withUri('/api/email/template')
        .withUriSegment(emailTemplateId)
        .withMethod("GET")
        .go();
  }

  /**
   * Creates a preview of the email template provided in the request. This allows you to preview an email template that
   * hasn't been saved to the database yet. The entire email template does not need to be provided on the request. This
   * will create the preview based on whatever is given.
   *
   * @param {PreviewRequest} request The request that contains the email template and optionally a locale to render it in.
   * @returns {Promise<ClientResponse<PreviewResponse>>}
   */
  retrieveEmailTemplatePreview(request: PreviewRequest): Promise<ClientResponse<PreviewResponse>> {
    return this.start<PreviewResponse, Errors>()
        .withUri('/api/email/template/preview')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Retrieves all of the email templates.
   *
   * @returns {Promise<ClientResponse<EmailTemplateResponse>>}
   */
  retrieveEmailTemplates(): Promise<ClientResponse<EmailTemplateResponse>> {
    return this.start<EmailTemplateResponse, void>()
        .withUri('/api/email/template')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves a single event log for the given Id.
   *
   * @param {number} eventLogId The Id of the event log to retrieve.
   * @returns {Promise<ClientResponse<EventLogResponse>>}
   */
  retrieveEventLog(eventLogId: number): Promise<ClientResponse<EventLogResponse>> {
    return this.start<EventLogResponse, Errors>()
        .withUri('/api/system/event-log')
        .withUriSegment(eventLogId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the families that a user belongs to.
   *
   * @param {UUID} userId The User's id
   * @returns {Promise<ClientResponse<FamilyResponse>>}
   */
  retrieveFamilies(userId: UUID): Promise<ClientResponse<FamilyResponse>> {
    return this.start<FamilyResponse, void>()
        .withUri('/api/user/family')
        .withParameter('userId', userId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the members of a family by the unique Family Id.
   *
   * @param {UUID} familyId The unique Id of the Family.
   * @returns {Promise<ClientResponse<FamilyResponse>>}
   */
  retrieveFamilyMembersByFamilyId(familyId: UUID): Promise<ClientResponse<FamilyResponse>> {
    return this.start<FamilyResponse, void>()
        .withUri('/api/user/family')
        .withUriSegment(familyId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the group for the given Id.
   *
   * @param {UUID} groupId The Id of the group.
   * @returns {Promise<ClientResponse<GroupResponse>>}
   */
  retrieveGroup(groupId: UUID): Promise<ClientResponse<GroupResponse>> {
    return this.start<GroupResponse, Errors>()
        .withUri('/api/group')
        .withUriSegment(groupId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the groups.
   *
   * @returns {Promise<ClientResponse<GroupResponse>>}
   */
  retrieveGroups(): Promise<ClientResponse<GroupResponse>> {
    return this.start<GroupResponse, void>()
        .withUri('/api/group')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the identity provider for the given id or all of the identity providers if the id is null.
   *
   * @param {UUID} identityProviderId (Optional) The identity provider id.
   * @returns {Promise<ClientResponse<IdentityProviderResponse>>}
   */
  retrieveIdentityProvider(identityProviderId: UUID): Promise<ClientResponse<IdentityProviderResponse>> {
    return this.start<IdentityProviderResponse, void>()
        .withUri('/api/identity-provider')
        .withUriSegment(identityProviderId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the identity providers.
   *
   * @returns {Promise<ClientResponse<IdentityProviderResponse>>}
   */
  retrieveIdentityProviders(): Promise<ClientResponse<IdentityProviderResponse>> {
    return this.start<IdentityProviderResponse, void>()
        .withUri('/api/identity-provider')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the actions for the user with the given Id that are currently inactive.
   * An inactive action means one that is time based and has been canceled or has expired, or is not time based.
   *
   * @param {UUID} userId The Id of the user to fetch the actions for.
   * @returns {Promise<ClientResponse<ActionResponse>>}
   */
  retrieveInactiveActions(userId: UUID): Promise<ClientResponse<ActionResponse>> {
    return this.start<ActionResponse, Errors>()
        .withUri('/api/user/action')
        .withParameter('userId', userId)
        .withParameter('active', false)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the applications that are currently inactive.
   *
   * @returns {Promise<ClientResponse<ApplicationResponse>>}
   */
  retrieveInactiveApplications(): Promise<ClientResponse<ApplicationResponse>> {
    return this.start<ApplicationResponse, void>()
        .withUri('/api/application')
        .withParameter('inactive', true)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the user actions that are currently inactive.
   *
   * @returns {Promise<ClientResponse<UserActionResponse>>}
   */
  retrieveInactiveUserActions(): Promise<ClientResponse<UserActionResponse>> {
    return this.start<UserActionResponse, void>()
        .withUri('/api/user-action')
        .withParameter('inactive', true)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the available integrations.
   *
   * @returns {Promise<ClientResponse<IntegrationResponse>>}
   */
  retrieveIntegration(): Promise<ClientResponse<IntegrationResponse>> {
    return this.start<IntegrationResponse, void>()
        .withUri('/api/integration')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the Public Key configured for verifying JSON Web Tokens (JWT) by the key Id (kid).
   *
   * @param {string} keyId The Id of the public key (kid).
   * @returns {Promise<ClientResponse<PublicKeyResponse>>}
   */
  retrieveJWTPublicKey(keyId: string): Promise<ClientResponse<PublicKeyResponse>> {
    return this.startAnonymous<PublicKeyResponse, void>()
        .withUri('/api/jwt/public-key')
        .withParameter('kid', keyId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the Public Key configured for verifying the JSON Web Tokens (JWT) issued by the Login API by the Application Id.
   *
   * @param {string} applicationId The Id of the Application for which this key is used.
   * @returns {Promise<ClientResponse<PublicKeyResponse>>}
   */
  retrieveJWTPublicKeyByApplicationId(applicationId: string): Promise<ClientResponse<PublicKeyResponse>> {
    return this.startAnonymous<PublicKeyResponse, void>()
        .withUri('/api/jwt/public-key')
        .withParameter('applicationId', applicationId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all Public Keys configured for verifying JSON Web Tokens (JWT).
   *
   * @returns {Promise<ClientResponse<PublicKeyResponse>>}
   */
  retrieveJWTPublicKeys(): Promise<ClientResponse<PublicKeyResponse>> {
    return this.startAnonymous<PublicKeyResponse, void>()
        .withUri('/api/jwt/public-key')
        .withMethod("GET")
        .go();
  }

  /**
   * Returns public keys used by FusionAuth to cryptographically verify JWTs using the JSON Web Key format.
   *
   * @returns {Promise<ClientResponse<JWKSResponse>>}
   */
  retrieveJsonWebKeySet(): Promise<ClientResponse<JWKSResponse>> {
    return this.startAnonymous<JWKSResponse, void>()
        .withUri('/.well-known/jwks.json')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the key for the given Id.
   *
   * @param {UUID} keyId The Id of the key.
   * @returns {Promise<ClientResponse<KeyResponse>>}
   */
  retrieveKey(keyId: UUID): Promise<ClientResponse<KeyResponse>> {
    return this.start<KeyResponse, Errors>()
        .withUri('/api/key')
        .withUriSegment(keyId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the keys.
   *
   * @returns {Promise<ClientResponse<KeyResponse>>}
   */
  retrieveKeys(): Promise<ClientResponse<KeyResponse>> {
    return this.start<KeyResponse, void>()
        .withUri('/api/key')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the lambda for the given Id.
   *
   * @param {UUID} lambdaId The Id of the lambda.
   * @returns {Promise<ClientResponse<LambdaResponse>>}
   */
  retrieveLambda(lambdaId: UUID): Promise<ClientResponse<LambdaResponse>> {
    return this.start<LambdaResponse, Errors>()
        .withUri('/api/lambda')
        .withUriSegment(lambdaId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the lambdas.
   *
   * @returns {Promise<ClientResponse<LambdaResponse>>}
   */
  retrieveLambdas(): Promise<ClientResponse<LambdaResponse>> {
    return this.start<LambdaResponse, void>()
        .withUri('/api/lambda')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the lambdas for the provided type.
   *
   * @param {LambdaType} type The type of the lambda to return.
   * @returns {Promise<ClientResponse<LambdaResponse>>}
   */
  retrieveLambdasByType(type: LambdaType): Promise<ClientResponse<LambdaResponse>> {
    return this.start<LambdaResponse, void>()
        .withUri('/api/lambda')
        .withParameter('type', type)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the login report between the two instants. If you specify an application id, it will only return the
   * login counts for that application.
   *
   * @param {UUID} applicationId (Optional) The application id.
   * @param {number} start The start instant as UTC milliseconds since Epoch.
   * @param {number} end The end instant as UTC milliseconds since Epoch.
   * @returns {Promise<ClientResponse<LoginReportResponse>>}
   */
  retrieveLoginReport(applicationId: UUID, start: number, end: number): Promise<ClientResponse<LoginReportResponse>> {
    return this.start<LoginReportResponse, Errors>()
        .withUri('/api/report/login')
        .withParameter('applicationId', applicationId)
        .withParameter('start', start)
        .withParameter('end', end)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the monthly active user report between the two instants. If you specify an application id, it will only
   * return the monthly active counts for that application.
   *
   * @param {UUID} applicationId (Optional) The application id.
   * @param {number} start The start instant as UTC milliseconds since Epoch.
   * @param {number} end The end instant as UTC milliseconds since Epoch.
   * @returns {Promise<ClientResponse<MonthlyActiveUserReportResponse>>}
   */
  retrieveMonthlyActiveReport(applicationId: UUID, start: number, end: number): Promise<ClientResponse<MonthlyActiveUserReportResponse>> {
    return this.start<MonthlyActiveUserReportResponse, Errors>()
        .withUri('/api/report/monthly-active-user')
        .withParameter('applicationId', applicationId)
        .withParameter('start', start)
        .withParameter('end', end)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the Oauth2 configuration for the application for the given Application Id.
   *
   * @param {UUID} applicationId The Id of the Application to retrieve OAuth configuration.
   * @returns {Promise<ClientResponse<OAuthConfigurationResponse>>}
   */
  retrieveOauthConfiguration(applicationId: UUID): Promise<ClientResponse<OAuthConfigurationResponse>> {
    return this.start<OAuthConfigurationResponse, Errors>()
        .withUri('/api/application')
        .withUriSegment(applicationId)
        .withUriSegment("oauth-configuration")
        .withMethod("GET")
        .go();
  }

  /**
   * Returns the well known OpenID Configuration JSON document
   *
   * @returns {Promise<ClientResponse<OpenIdConfiguration>>}
   */
  retrieveOpenIdConfiguration(): Promise<ClientResponse<OpenIdConfiguration>> {
    return this.startAnonymous<OpenIdConfiguration, void>()
        .withUri('/.well-known/openid-configuration')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the password validation rules for a specific tenant. This method requires a tenantId to be provided 
   * through the use of a Tenant scoped API key or an HTTP header X-FusionAuth-TenantId to specify the Tenant Id.
   * 
   * This API does not require an API key.
   *
   * @returns {Promise<ClientResponse<PasswordValidationRulesResponse>>}
   */
  retrievePasswordValidationRules(): Promise<ClientResponse<PasswordValidationRulesResponse>> {
    return this.startAnonymous<PasswordValidationRulesResponse, void>()
        .withUri('/api/tenant/password-validation-rules')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the password validation rules for a specific tenant.
   * 
   * This API does not require an API key.
   *
   * @param {UUID} tenantId The Id of the tenant.
   * @returns {Promise<ClientResponse<PasswordValidationRulesResponse>>}
   */
  retrievePasswordValidationRulesWithTenantId(tenantId: UUID): Promise<ClientResponse<PasswordValidationRulesResponse>> {
    return this.startAnonymous<PasswordValidationRulesResponse, void>()
        .withUri('/api/tenant/password-validation-rules')
        .withUriSegment(tenantId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the children for the given parent email address.
   *
   * @param {string} parentEmail The email of the parent.
   * @returns {Promise<ClientResponse<PendingResponse>>}
   */
  retrievePendingChildren(parentEmail: string): Promise<ClientResponse<PendingResponse>> {
    return this.start<PendingResponse, Errors>()
        .withUri('/api/user/family/pending')
        .withParameter('parentEmail', parentEmail)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the last number of login records.
   *
   * @param {number} offset The initial record. e.g. 0 is the last login, 100 will be the 100th most recent login.
   * @param {number} limit (Optional, defaults to 10) The number of records to retrieve.
   * @returns {Promise<ClientResponse<RecentLoginResponse>>}
   */
  retrieveRecentLogins(offset: number, limit: number): Promise<ClientResponse<RecentLoginResponse>> {
    return this.start<RecentLoginResponse, Errors>()
        .withUri('/api/user/recent-login')
        .withParameter('offset', offset)
        .withParameter('limit', limit)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the refresh tokens that belong to the user with the given Id.
   *
   * @param {UUID} userId The Id of the user.
   * @returns {Promise<ClientResponse<RefreshResponse>>}
   */
  retrieveRefreshTokens(userId: UUID): Promise<ClientResponse<RefreshResponse>> {
    return this.start<RefreshResponse, Errors>()
        .withUri('/api/jwt/refresh')
        .withParameter('userId', userId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the user registration for the user with the given id and the given application id.
   *
   * @param {UUID} userId The Id of the user.
   * @param {UUID} applicationId The Id of the application.
   * @returns {Promise<ClientResponse<RegistrationResponse>>}
   */
  retrieveRegistration(userId: UUID, applicationId: UUID): Promise<ClientResponse<RegistrationResponse>> {
    return this.start<RegistrationResponse, Errors>()
        .withUri('/api/user/registration')
        .withUriSegment(userId)
        .withUriSegment(applicationId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the registration report between the two instants. If you specify an application id, it will only return
   * the registration counts for that application.
   *
   * @param {UUID} applicationId (Optional) The application id.
   * @param {number} start The start instant as UTC milliseconds since Epoch.
   * @param {number} end The end instant as UTC milliseconds since Epoch.
   * @returns {Promise<ClientResponse<RegistrationReportResponse>>}
   */
  retrieveRegistrationReport(applicationId: UUID, start: number, end: number): Promise<ClientResponse<RegistrationReportResponse>> {
    return this.start<RegistrationReportResponse, Errors>()
        .withUri('/api/report/registration')
        .withParameter('applicationId', applicationId)
        .withParameter('start', start)
        .withParameter('end', end)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the system configuration.
   *
   * @returns {Promise<ClientResponse<SystemConfigurationResponse>>}
   */
  retrieveSystemConfiguration(): Promise<ClientResponse<SystemConfigurationResponse>> {
    return this.start<SystemConfigurationResponse, void>()
        .withUri('/api/system-configuration')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the tenant for the given Id.
   *
   * @param {UUID} tenantId The Id of the tenant.
   * @returns {Promise<ClientResponse<TenantResponse>>}
   */
  retrieveTenant(tenantId: UUID): Promise<ClientResponse<TenantResponse>> {
    return this.start<TenantResponse, Errors>()
        .withUri('/api/tenant')
        .withUriSegment(tenantId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the tenants.
   *
   * @returns {Promise<ClientResponse<TenantResponse>>}
   */
  retrieveTenants(): Promise<ClientResponse<TenantResponse>> {
    return this.start<TenantResponse, void>()
        .withUri('/api/tenant')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the theme for the given Id.
   *
   * @param {UUID} themeId The Id of the theme.
   * @returns {Promise<ClientResponse<ThemeResponse>>}
   */
  retrieveTheme(themeId: UUID): Promise<ClientResponse<ThemeResponse>> {
    return this.start<ThemeResponse, Errors>()
        .withUri('/api/theme')
        .withUriSegment(themeId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the themes.
   *
   * @returns {Promise<ClientResponse<ThemeResponse>>}
   */
  retrieveThemes(): Promise<ClientResponse<ThemeResponse>> {
    return this.start<ThemeResponse, void>()
        .withUri('/api/theme')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the totals report. This contains all of the total counts for each application and the global registration
   * count.
   *
   * @returns {Promise<ClientResponse<TotalsReportResponse>>}
   */
  retrieveTotalReport(): Promise<ClientResponse<TotalsReportResponse>> {
    return this.start<TotalsReportResponse, void>()
        .withUri('/api/report/totals')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the user for the given Id.
   *
   * @param {UUID} userId The Id of the user.
   * @returns {Promise<ClientResponse<UserResponse>>}
   */
  retrieveUser(userId: UUID): Promise<ClientResponse<UserResponse>> {
    return this.start<UserResponse, Errors>()
        .withUri('/api/user')
        .withUriSegment(userId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the user action for the given Id. If you pass in null for the id, this will return all of the user
   * actions.
   *
   * @param {UUID} userActionId (Optional) The Id of the user action.
   * @returns {Promise<ClientResponse<UserActionResponse>>}
   */
  retrieveUserAction(userActionId: UUID): Promise<ClientResponse<UserActionResponse>> {
    return this.start<UserActionResponse, void>()
        .withUri('/api/user-action')
        .withUriSegment(userActionId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the user action reason for the given Id. If you pass in null for the id, this will return all of the user
   * action reasons.
   *
   * @param {UUID} userActionReasonId (Optional) The Id of the user action reason.
   * @returns {Promise<ClientResponse<UserActionReasonResponse>>}
   */
  retrieveUserActionReason(userActionReasonId: UUID): Promise<ClientResponse<UserActionReasonResponse>> {
    return this.start<UserActionReasonResponse, void>()
        .withUri('/api/user-action-reason')
        .withUriSegment(userActionReasonId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all the user action reasons.
   *
   * @returns {Promise<ClientResponse<UserActionReasonResponse>>}
   */
  retrieveUserActionReasons(): Promise<ClientResponse<UserActionReasonResponse>> {
    return this.start<UserActionReasonResponse, void>()
        .withUri('/api/user-action-reason')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the user actions.
   *
   * @returns {Promise<ClientResponse<UserActionResponse>>}
   */
  retrieveUserActions(): Promise<ClientResponse<UserActionResponse>> {
    return this.start<UserActionResponse, void>()
        .withUri('/api/user-action')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the user by a change password Id. The intended use of this API is to retrieve a user after the forgot
   * password workflow has been initiated and you may not know the user's email or username.
   *
   * @param {string} changePasswordId The unique change password Id that was sent via email or returned by the Forgot Password API.
   * @returns {Promise<ClientResponse<UserResponse>>}
   */
  retrieveUserByChangePasswordId(changePasswordId: string): Promise<ClientResponse<UserResponse>> {
    return this.start<UserResponse, Errors>()
        .withUri('/api/user')
        .withParameter('changePasswordId', changePasswordId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the user for the given email.
   *
   * @param {string} email The email of the user.
   * @returns {Promise<ClientResponse<UserResponse>>}
   */
  retrieveUserByEmail(email: string): Promise<ClientResponse<UserResponse>> {
    return this.start<UserResponse, Errors>()
        .withUri('/api/user')
        .withParameter('email', email)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the user for the loginId. The loginId can be either the username or the email.
   *
   * @param {string} loginId The email or username of the user.
   * @returns {Promise<ClientResponse<UserResponse>>}
   */
  retrieveUserByLoginId(loginId: string): Promise<ClientResponse<UserResponse>> {
    return this.start<UserResponse, Errors>()
        .withUri('/api/user')
        .withParameter('loginId', loginId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the user for the given username.
   *
   * @param {string} username The username of the user.
   * @returns {Promise<ClientResponse<UserResponse>>}
   */
  retrieveUserByUsername(username: string): Promise<ClientResponse<UserResponse>> {
    return this.start<UserResponse, Errors>()
        .withUri('/api/user')
        .withParameter('username', username)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the user by a verificationId. The intended use of this API is to retrieve a user after the forgot
   * password workflow has been initiated and you may not know the user's email or username.
   *
   * @param {string} verificationId The unique verification Id that has been set on the user object.
   * @returns {Promise<ClientResponse<UserResponse>>}
   */
  retrieveUserByVerificationId(verificationId: string): Promise<ClientResponse<UserResponse>> {
    return this.start<UserResponse, Errors>()
        .withUri('/api/user')
        .withParameter('verificationId', verificationId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the comments for the user with the given Id.
   *
   * @param {UUID} userId The Id of the user.
   * @returns {Promise<ClientResponse<UserCommentResponse>>}
   */
  retrieveUserComments(userId: UUID): Promise<ClientResponse<UserCommentResponse>> {
    return this.start<UserCommentResponse, Errors>()
        .withUri('/api/user/comment')
        .withUriSegment(userId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieve a single User consent by Id.
   *
   * @param {UUID} userConsentId The User consent Id
   * @returns {Promise<ClientResponse<UserConsentResponse>>}
   */
  retrieveUserConsent(userConsentId: UUID): Promise<ClientResponse<UserConsentResponse>> {
    return this.start<UserConsentResponse, void>()
        .withUri('/api/user/consent')
        .withUriSegment(userConsentId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the consents for a User.
   *
   * @param {UUID} userId The User's Id
   * @returns {Promise<ClientResponse<UserConsentResponse>>}
   */
  retrieveUserConsents(userId: UUID): Promise<ClientResponse<UserConsentResponse>> {
    return this.start<UserConsentResponse, void>()
        .withUri('/api/user/consent')
        .withParameter('userId', userId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the login report between the two instants for a particular user by Id. If you specify an application id, it will only return the
   * login counts for that application.
   *
   * @param {UUID} applicationId (Optional) The application id.
   * @param {UUID} userId The userId id.
   * @param {number} start The start instant as UTC milliseconds since Epoch.
   * @param {number} end The end instant as UTC milliseconds since Epoch.
   * @returns {Promise<ClientResponse<LoginReportResponse>>}
   */
  retrieveUserLoginReport(applicationId: UUID, userId: UUID, start: number, end: number): Promise<ClientResponse<LoginReportResponse>> {
    return this.start<LoginReportResponse, Errors>()
        .withUri('/api/report/login')
        .withParameter('applicationId', applicationId)
        .withParameter('userId', userId)
        .withParameter('start', start)
        .withParameter('end', end)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the login report between the two instants for a particular user by login Id. If you specify an application id, it will only return the
   * login counts for that application.
   *
   * @param {UUID} applicationId (Optional) The application id.
   * @param {string} loginId The userId id.
   * @param {number} start The start instant as UTC milliseconds since Epoch.
   * @param {number} end The end instant as UTC milliseconds since Epoch.
   * @returns {Promise<ClientResponse<LoginReportResponse>>}
   */
  retrieveUserLoginReportByLoginId(applicationId: UUID, loginId: string, start: number, end: number): Promise<ClientResponse<LoginReportResponse>> {
    return this.start<LoginReportResponse, Errors>()
        .withUri('/api/report/login')
        .withParameter('applicationId', applicationId)
        .withParameter('loginId', loginId)
        .withParameter('start', start)
        .withParameter('end', end)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the last number of login records for a user.
   *
   * @param {UUID} userId The Id of the user.
   * @param {number} offset The initial record. e.g. 0 is the last login, 100 will be the 100th most recent login.
   * @param {number} limit (Optional, defaults to 10) The number of records to retrieve.
   * @returns {Promise<ClientResponse<RecentLoginResponse>>}
   */
  retrieveUserRecentLogins(userId: UUID, offset: number, limit: number): Promise<ClientResponse<RecentLoginResponse>> {
    return this.start<RecentLoginResponse, Errors>()
        .withUri('/api/user/recent-login')
        .withParameter('userId', userId)
        .withParameter('offset', offset)
        .withParameter('limit', limit)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the user for the given Id. This method does not use an API key, instead it uses a JSON Web Token (JWT) for authentication.
   *
   * @param {string} encodedJWT The encoded JWT (access token).
   * @returns {Promise<ClientResponse<UserResponse>>}
   */
  retrieveUserUsingJWT(encodedJWT: string): Promise<ClientResponse<UserResponse>> {
    return this.startAnonymous<UserResponse, Errors>()
        .withUri('/api/user')
        .withAuthorization('JWT ' + encodedJWT)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the webhook for the given Id. If you pass in null for the id, this will return all the webhooks.
   *
   * @param {UUID} webhookId (Optional) The Id of the webhook.
   * @returns {Promise<ClientResponse<WebhookResponse>>}
   */
  retrieveWebhook(webhookId: UUID): Promise<ClientResponse<WebhookResponse>> {
    return this.start<WebhookResponse, void>()
        .withUri('/api/webhook')
        .withUriSegment(webhookId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all the webhooks.
   *
   * @returns {Promise<ClientResponse<WebhookResponse>>}
   */
  retrieveWebhooks(): Promise<ClientResponse<WebhookResponse>> {
    return this.start<WebhookResponse, void>()
        .withUri('/api/webhook')
        .withMethod("GET")
        .go();
  }

  /**
   * Revokes a single refresh token, all tokens for a user or all tokens for an application. If you provide a user id
   * and an application id, this will delete all the refresh tokens for that user for that application.
   *
   * @param {string} token (Optional) The refresh token to delete.
   * @param {UUID} userId (Optional) The user id whose tokens to delete.
   * @param {UUID} applicationId (Optional) The application id of the tokens to delete.
   * @returns {Promise<ClientResponse<void>>}
   */
  revokeRefreshToken(token: string, userId: UUID, applicationId: UUID): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/jwt/refresh')
        .withParameter('token', token)
        .withParameter('userId', userId)
        .withParameter('applicationId', applicationId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Revokes a single User consent by Id.
   *
   * @param {UUID} userConsentId The User Consent Id
   * @returns {Promise<ClientResponse<void>>}
   */
  revokeUserConsent(userConsentId: UUID): Promise<ClientResponse<void>> {
    return this.start<void, void>()
        .withUri('/api/user/consent')
        .withUriSegment(userConsentId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Searches the audit logs with the specified criteria and pagination.
   *
   * @param {AuditLogSearchRequest} request The search criteria and pagination information.
   * @returns {Promise<ClientResponse<AuditLogSearchResponse>>}
   */
  searchAuditLogs(request: AuditLogSearchRequest): Promise<ClientResponse<AuditLogSearchResponse>> {
    return this.start<AuditLogSearchResponse, void>()
        .withUri('/api/system/audit-log/search')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Searches the event logs with the specified criteria and pagination.
   *
   * @param {EventLogSearchRequest} request The search criteria and pagination information.
   * @returns {Promise<ClientResponse<EventLogSearchResponse>>}
   */
  searchEventLogs(request: EventLogSearchRequest): Promise<ClientResponse<EventLogSearchResponse>> {
    return this.start<EventLogSearchResponse, void>()
        .withUri('/api/system/event-log/search')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Searches the login records with the specified criteria and pagination.
   *
   * @param {LoginRecordSearchRequest} request The search criteria and pagination information.
   * @returns {Promise<ClientResponse<LoginRecordSearchResponse>>}
   */
  searchLoginRecords(request: LoginRecordSearchRequest): Promise<ClientResponse<LoginRecordSearchResponse>> {
    return this.start<LoginRecordSearchResponse, void>()
        .withUri('/api/system/login-record/search')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Retrieves the users for the given ids. If any id is invalid, it is ignored.
   *
   * @param {Array<string>} ids The user ids to search for.
   * @returns {Promise<ClientResponse<SearchResponse>>}
   *
   * @deprecated This method has been renamed to searchUsersByIds, use that method instead.
   */
  searchUsers(ids: Array<string>): Promise<ClientResponse<SearchResponse>> {
    return this.start<SearchResponse, Errors>()
        .withUri('/api/user/search')
        .withParameter('ids', ids)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the users for the given ids. If any id is invalid, it is ignored.
   *
   * @param {Array<string>} ids The user ids to search for.
   * @returns {Promise<ClientResponse<SearchResponse>>}
   */
  searchUsersByIds(ids: Array<string>): Promise<ClientResponse<SearchResponse>> {
    return this.start<SearchResponse, Errors>()
        .withUri('/api/user/search')
        .withParameter('ids', ids)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the users for the given search criteria and pagination.
   *
   * @param {SearchRequest} request The search criteria and pagination constraints. Fields used: ids, query, queryString, numberOfResults, orderBy, startRow,
   *    and sortFields.
   * @returns {Promise<ClientResponse<SearchResponse>>}
   */
  searchUsersByQuery(request: SearchRequest): Promise<ClientResponse<SearchResponse>> {
    return this.start<SearchResponse, Errors>()
        .withUri('/api/user/search')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Retrieves the users for the given search criteria and pagination.
   *
   * @param {SearchRequest} request The search criteria and pagination constraints. Fields used: ids, query, queryString, numberOfResults, orderBy, startRow,
   *    and sortFields.
   * @returns {Promise<ClientResponse<SearchResponse>>}
   *
   * @deprecated This method has been renamed to searchUsersByQuery, use that method instead.
   */
  searchUsersByQueryString(request: SearchRequest): Promise<ClientResponse<SearchResponse>> {
    return this.start<SearchResponse, Errors>()
        .withUri('/api/user/search')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Send an email using an email template id. You can optionally provide <code>requestData</code> to access key value
   * pairs in the email template.
   *
   * @param {UUID} emailTemplateId The id for the template.
   * @param {SendRequest} request The send email request that contains all of the information used to send the email.
   * @returns {Promise<ClientResponse<SendResponse>>}
   */
  sendEmail(emailTemplateId: UUID, request: SendRequest): Promise<ClientResponse<SendResponse>> {
    return this.start<SendResponse, Errors>()
        .withUri('/api/email/send')
        .withUriSegment(emailTemplateId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Sends out an email to a parent that they need to register and create a family or need to log in and add a child to their existing family.
   *
   * @param {FamilyEmailRequest} request The request object that contains the parent email.
   * @returns {Promise<ClientResponse<void>>}
   */
  sendFamilyRequestEmail(request: FamilyEmailRequest): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/user/family/request')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Send a passwordless authentication code in an email to complete login.
   *
   * @param {PasswordlessSendRequest} request The passwordless send request that contains all of the information used to send an email containing a code.
   * @returns {Promise<ClientResponse<void>>}
   */
  sendPasswordlessCode(request: PasswordlessSendRequest): Promise<ClientResponse<void>> {
    return this.startAnonymous<void, Errors>()
        .withUri('/api/passwordless/send')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Send a Two Factor authentication code to assist in setting up Two Factor authentication or disabling.
   *
   * @param {TwoFactorSendRequest} request The request object that contains all of the information used to send the code.
   * @returns {Promise<ClientResponse<void>>}
   */
  sendTwoFactorCode(request: TwoFactorSendRequest): Promise<ClientResponse<void>> {
    return this.start<void, Errors>()
        .withUri('/api/two-factor/send')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Send a Two Factor authentication code to allow the completion of Two Factor authentication.
   *
   * @param {string} twoFactorId The Id returned by the Login API necessary to complete Two Factor authentication.
   * @returns {Promise<ClientResponse<void>>}
   */
  sendTwoFactorCodeForLogin(twoFactorId: string): Promise<ClientResponse<void>> {
    return this.startAnonymous<void, Errors>()
        .withHeader('Content-Type', 'text/plain')
        .withUri('/api/two-factor/send')
        .withUriSegment(twoFactorId)
        .withMethod("POST")
        .go();
  }

  /**
   * Begins a login request for a 3rd party login that requires user interaction such as HYPR.
   *
   * @param {IdentityProviderStartLoginRequest} request The third-party login request that contains information from the third-party login
   *    providers that FusionAuth uses to reconcile the user's account.
   * @returns {Promise<ClientResponse<IdentityProviderStartLoginResponse>>}
   */
  startIdentityProviderLogin(request: IdentityProviderStartLoginRequest): Promise<ClientResponse<IdentityProviderStartLoginResponse>> {
    return this.start<IdentityProviderStartLoginResponse, Errors>()
        .withUri('/api/identity-provider/start')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Start a passwordless login request by generating a passwordless code. This code can be sent to the User using the Send
   * Passwordless Code API or using a mechanism outside of FusionAuth. The passwordless login is completed by using the Passwordless Login API with this code.
   *
   * @param {PasswordlessStartRequest} request The passwordless start request that contains all of the information used to begin the passwordless login request.
   * @returns {Promise<ClientResponse<PasswordlessStartResponse>>}
   */
  startPasswordlessLogin(request: PasswordlessStartRequest): Promise<ClientResponse<PasswordlessStartResponse>> {
    return this.start<PasswordlessStartResponse, Errors>()
        .withUri('/api/passwordless/start')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Complete login using a 2FA challenge
   *
   * @param {TwoFactorLoginRequest} request The login request that contains the user credentials used to log them in.
   * @returns {Promise<ClientResponse<LoginResponse>>}
   */
  twoFactorLogin(request: TwoFactorLoginRequest): Promise<ClientResponse<LoginResponse>> {
    return this.startAnonymous<LoginResponse, Errors>()
        .withUri('/api/two-factor/login')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Updates the application with the given Id.
   *
   * @param {UUID} applicationId The Id of the application to update.
   * @param {ApplicationRequest} request The request that contains all of the new application information.
   * @returns {Promise<ClientResponse<ApplicationResponse>>}
   */
  updateApplication(applicationId: UUID, request: ApplicationRequest): Promise<ClientResponse<ApplicationResponse>> {
    return this.start<ApplicationResponse, Errors>()
        .withUri('/api/application')
        .withUriSegment(applicationId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the application role with the given id for the application.
   *
   * @param {UUID} applicationId The Id of the application that the role belongs to.
   * @param {UUID} roleId The Id of the role to update.
   * @param {ApplicationRequest} request The request that contains all of the new role information.
   * @returns {Promise<ClientResponse<ApplicationResponse>>}
   */
  updateApplicationRole(applicationId: UUID, roleId: UUID, request: ApplicationRequest): Promise<ClientResponse<ApplicationResponse>> {
    return this.start<ApplicationResponse, Errors>()
        .withUri('/api/application')
        .withUriSegment(applicationId)
        .withUriSegment("role")
        .withUriSegment(roleId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the consent with the given Id.
   *
   * @param {UUID} consentId The Id of the consent to update.
   * @param {ConsentRequest} request The request that contains all of the new consent information.
   * @returns {Promise<ClientResponse<ConsentResponse>>}
   */
  updateConsent(consentId: UUID, request: ConsentRequest): Promise<ClientResponse<ConsentResponse>> {
    return this.start<ConsentResponse, Errors>()
        .withUri('/api/consent')
        .withUriSegment(consentId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the email template with the given Id.
   *
   * @param {UUID} emailTemplateId The Id of the email template to update.
   * @param {EmailTemplateRequest} request The request that contains all of the new email template information.
   * @returns {Promise<ClientResponse<EmailTemplateResponse>>}
   */
  updateEmailTemplate(emailTemplateId: UUID, request: EmailTemplateRequest): Promise<ClientResponse<EmailTemplateResponse>> {
    return this.start<EmailTemplateResponse, Errors>()
        .withUri('/api/email/template')
        .withUriSegment(emailTemplateId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the group with the given Id.
   *
   * @param {UUID} groupId The Id of the group to update.
   * @param {GroupRequest} request The request that contains all of the new group information.
   * @returns {Promise<ClientResponse<GroupResponse>>}
   */
  updateGroup(groupId: UUID, request: GroupRequest): Promise<ClientResponse<GroupResponse>> {
    return this.start<GroupResponse, Errors>()
        .withUri('/api/group')
        .withUriSegment(groupId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the identity provider with the given Id.
   *
   * @param {UUID} identityProviderId The Id of the identity provider to update.
   * @param {IdentityProviderRequest} request The request object that contains the updated identity provider.
   * @returns {Promise<ClientResponse<IdentityProviderResponse>>}
   */
  updateIdentityProvider(identityProviderId: UUID, request: IdentityProviderRequest): Promise<ClientResponse<IdentityProviderResponse>> {
    return this.start<IdentityProviderResponse, Errors>()
        .withUri('/api/identity-provider')
        .withUriSegment(identityProviderId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the available integrations.
   *
   * @param {IntegrationRequest} request The request that contains all of the new integration information.
   * @returns {Promise<ClientResponse<IntegrationResponse>>}
   */
  updateIntegrations(request: IntegrationRequest): Promise<ClientResponse<IntegrationResponse>> {
    return this.start<IntegrationResponse, Errors>()
        .withUri('/api/integration')
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the key with the given Id.
   *
   * @param {UUID} keyId The Id of the key to update.
   * @param {KeyRequest} request The request that contains all of the new key information.
   * @returns {Promise<ClientResponse<KeyResponse>>}
   */
  updateKey(keyId: UUID, request: KeyRequest): Promise<ClientResponse<KeyResponse>> {
    return this.start<KeyResponse, Errors>()
        .withUri('/api/key')
        .withUriSegment(keyId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the lambda with the given Id.
   *
   * @param {UUID} lambdaId The Id of the lambda to update.
   * @param {LambdaRequest} request The request that contains all of the new lambda information.
   * @returns {Promise<ClientResponse<LambdaResponse>>}
   */
  updateLambda(lambdaId: UUID, request: LambdaRequest): Promise<ClientResponse<LambdaResponse>> {
    return this.start<LambdaResponse, Errors>()
        .withUri('/api/lambda')
        .withUriSegment(lambdaId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the registration for the user with the given id and the application defined in the request.
   *
   * @param {UUID} userId The Id of the user whose registration is going to be updated.
   * @param {RegistrationRequest} request The request that contains all of the new registration information.
   * @returns {Promise<ClientResponse<RegistrationResponse>>}
   */
  updateRegistration(userId: UUID, request: RegistrationRequest): Promise<ClientResponse<RegistrationResponse>> {
    return this.start<RegistrationResponse, Errors>()
        .withUri('/api/user/registration')
        .withUriSegment(userId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the system configuration.
   *
   * @param {SystemConfigurationRequest} request The request that contains all of the new system configuration information.
   * @returns {Promise<ClientResponse<SystemConfigurationResponse>>}
   */
  updateSystemConfiguration(request: SystemConfigurationRequest): Promise<ClientResponse<SystemConfigurationResponse>> {
    return this.start<SystemConfigurationResponse, Errors>()
        .withUri('/api/system-configuration')
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the tenant with the given Id.
   *
   * @param {UUID} tenantId The Id of the tenant to update.
   * @param {TenantRequest} request The request that contains all of the new tenant information.
   * @returns {Promise<ClientResponse<TenantResponse>>}
   */
  updateTenant(tenantId: UUID, request: TenantRequest): Promise<ClientResponse<TenantResponse>> {
    return this.start<TenantResponse, Errors>()
        .withUri('/api/tenant')
        .withUriSegment(tenantId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the theme with the given Id.
   *
   * @param {UUID} themeId The Id of the theme to update.
   * @param {ThemeRequest} request The request that contains all of the new theme information.
   * @returns {Promise<ClientResponse<ThemeResponse>>}
   */
  updateTheme(themeId: UUID, request: ThemeRequest): Promise<ClientResponse<ThemeResponse>> {
    return this.start<ThemeResponse, Errors>()
        .withUri('/api/theme')
        .withUriSegment(themeId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the user with the given Id.
   *
   * @param {UUID} userId The Id of the user to update.
   * @param {UserRequest} request The request that contains all of the new user information.
   * @returns {Promise<ClientResponse<UserResponse>>}
   */
  updateUser(userId: UUID, request: UserRequest): Promise<ClientResponse<UserResponse>> {
    return this.start<UserResponse, Errors>()
        .withUri('/api/user')
        .withUriSegment(userId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the user action with the given Id.
   *
   * @param {UUID} userActionId The Id of the user action to update.
   * @param {UserActionRequest} request The request that contains all of the new user action information.
   * @returns {Promise<ClientResponse<UserActionResponse>>}
   */
  updateUserAction(userActionId: UUID, request: UserActionRequest): Promise<ClientResponse<UserActionResponse>> {
    return this.start<UserActionResponse, Errors>()
        .withUri('/api/user-action')
        .withUriSegment(userActionId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the user action reason with the given Id.
   *
   * @param {UUID} userActionReasonId The Id of the user action reason to update.
   * @param {UserActionReasonRequest} request The request that contains all of the new user action reason information.
   * @returns {Promise<ClientResponse<UserActionReasonResponse>>}
   */
  updateUserActionReason(userActionReasonId: UUID, request: UserActionReasonRequest): Promise<ClientResponse<UserActionReasonResponse>> {
    return this.start<UserActionReasonResponse, Errors>()
        .withUri('/api/user-action-reason')
        .withUriSegment(userActionReasonId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates a single User consent by Id.
   *
   * @param {UUID} userConsentId The User Consent Id
   * @param {UserConsentRequest} request The request that contains the user consent information.
   * @returns {Promise<ClientResponse<UserConsentResponse>>}
   */
  updateUserConsent(userConsentId: UUID, request: UserConsentRequest): Promise<ClientResponse<UserConsentResponse>> {
    return this.start<UserConsentResponse, Errors>()
        .withUri('/api/user/consent')
        .withUriSegment(userConsentId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the webhook with the given Id.
   *
   * @param {UUID} webhookId The Id of the webhook to update.
   * @param {WebhookRequest} request The request that contains all of the new webhook information.
   * @returns {Promise<ClientResponse<WebhookResponse>>}
   */
  updateWebhook(webhookId: UUID, request: WebhookRequest): Promise<ClientResponse<WebhookResponse>> {
    return this.start<WebhookResponse, Errors>()
        .withUri('/api/webhook')
        .withUriSegment(webhookId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Validates the end-user provided user_code from the user-interaction of the Device Authorization Grant.
   * If you build your own activation form you should validate the user provided code prior to beginning the Authorization grant.
   *
   * @param {string} user_code The end-user verification code.
   * @param {string} client_id The client id.
   * @returns {Promise<ClientResponse<void>>}
   */
  validateDevice(user_code: string, client_id: string): Promise<ClientResponse<void>> {
    return this.startAnonymous<void, void>()
        .withUri('/oauth2/device/validate')
        .withParameter('user_code', user_code)
        .withParameter('client_id', client_id)
        .withMethod("GET")
        .go();
  }

  /**
   * Validates the provided JWT (encoded JWT string) to ensure the token is valid. A valid access token is properly
   * signed and not expired.
   * <p>
   * This API may be used to verify the JWT as well as decode the encoded JWT into human readable identity claims.
   *
   * @param {string} encodedJWT The encoded JWT (access token).
   * @returns {Promise<ClientResponse<ValidateResponse>>}
   */
  validateJWT(encodedJWT: string): Promise<ClientResponse<ValidateResponse>> {
    return this.startAnonymous<ValidateResponse, void>()
        .withUri('/api/jwt/validate')
        .withAuthorization('JWT ' + encodedJWT)
        .withMethod("GET")
        .go();
  }

  /**
   * Confirms a email verification. The Id given is usually from an email sent to the user.
   *
   * @param {string} verificationId The email verification id sent to the user.
   * @returns {Promise<ClientResponse<void>>}
   */
  verifyEmail(verificationId: string): Promise<ClientResponse<void>> {
    return this.startAnonymous<void, Errors>()
        .withHeader('Content-Type', 'text/plain')
        .withUri('/api/user/verify-email')
        .withUriSegment(verificationId)
        .withMethod("POST")
        .go();
  }

  /**
   * Confirms an application registration. The Id given is usually from an email sent to the user.
   *
   * @param {string} verificationId The registration verification Id sent to the user.
   * @returns {Promise<ClientResponse<void>>}
   */
  verifyRegistration(verificationId: string): Promise<ClientResponse<void>> {
    return this.startAnonymous<void, Errors>()
        .withHeader('Content-Type', 'text/plain')
        .withUri('/api/user/verify-registration')
        .withUriSegment(verificationId)
        .withMethod("POST")
        .go();
  }


  /* ===================================================================================================================
   * Private methods
   * ===================================================================================================================*/

  /**
   * creates a rest client
   *
   * @returns The RESTClient that will be used to call.
   * @private
   */
  private start<RT, ERT>(): IRESTClient<RT, ERT> {
    return this.startAnonymous<RT, ERT>()
               .withAuthorization(this.apiKey);
  }

  private startAnonymous<RT, ERT>(): IRESTClient<RT, ERT> {
    let client = this.clientBuilder.build<RT, ERT>(this.host, this.httpAgent);

    if (this.tenantId != null) {
      client.withHeader('X-FusionAuth-TenantId', this.tenantId);
    }

    if (this.credentials != null) {
      client.withCredentials(this.credentials);
    }

    return client;
  }
}

export default FusionAuthClient;

/**
 * A 128 bit UUID in string format "8-4-4-4-12", for example "58D5E212-165B-4CA0-909B-C86B9CEE0111".
 */
export type UUID = string;


/**
 * @author Daniel DeGroff
 */
export interface AccessToken {
  access_token?: string;
  expires_in?: number;
  id_token?: string;
  refresh_token?: string;
  scope?: string;
  token_type?: TokenType;
  userId?: UUID;
}

export interface ActionData {
  actioneeUserId?: UUID;
  actionerUserId?: UUID;
  applicationIds?: Array<UUID>;
  comment?: string;
  emailUser?: boolean;
  expiry?: number;
  notifyUser?: boolean;
  option?: string;
  reasonId?: UUID;
  userActionId?: UUID;
}

/**
 * The user action request object.
 *
 * @author Brian Pontarelli
 */
export interface ActionRequest {
  action?: ActionData;
  broadcast?: boolean;
}

/**
 * The user action response object.
 *
 * @author Brian Pontarelli
 */
export interface ActionResponse {
  action?: UserActionLog;
  actions?: Array<UserActionLog>;
}

/**
 * Available JSON Web Algorithms (JWA) as described in RFC 7518 available for this JWT implementation.
 *
 * @author Daniel DeGroff
 */
export enum Algorithm {
  ES256 = "SHA256withECDSA",
  ES384 = "SHA384withECDSA",
  ES512 = "SHA512withECDSA",
  HS256 = "HmacSHA256",
  HS384 = "HmacSHA384",
  HS512 = "HmacSHA512",
  RS256 = "SHA256withRSA",
  RS384 = "SHA384withRSA",
  RS512 = "SHA512withRSA",
  none = "None"
}

/**
 * @author Daniel DeGroff
 */
export interface AppleApplicationConfiguration extends BaseIdentityProviderApplicationConfiguration {
  buttonText?: string;
  keyId?: UUID;
  scope?: string;
  servicesId?: string;
  teamId?: string;
}

/**
 * @author Daniel DeGroff
 */
export interface AppleIdentityProvider extends BaseIdentityProvider<AppleApplicationConfiguration> {
  buttonText?: string;
  keyId?: UUID;
  scope?: string;
  servicesId?: string;
  teamId?: string;
}

/**
 * @author Seth Musselman
 */
export interface Application {
  active?: boolean;
  authenticationTokenConfiguration?: AuthenticationTokenConfiguration;
  cleanSpeakConfiguration?: CleanSpeakConfiguration;
  data?: Record<string, any>;
  id?: UUID;
  jwtConfiguration?: JWTConfiguration;
  lambdaConfiguration?: LambdaConfiguration;
  loginConfiguration?: LoginConfiguration;
  name?: string;
  oauthConfiguration?: OAuth2Configuration;
  passwordlessConfiguration?: PasswordlessConfiguration;
  registrationConfiguration?: RegistrationConfiguration;
  registrationDeletePolicy?: ApplicationRegistrationDeletePolicy;
  roles?: Array<ApplicationRole>;
  samlv2Configuration?: SAMLv2Configuration;
  tenantId?: UUID;
  verificationEmailTemplateId?: UUID;
  verifyRegistration?: boolean;
}

/**
 * Events that are bound to applications.
 *
 * @author Brian Pontarelli
 */
export interface ApplicationEvent {
}

/**
 * A Application-level policy for deleting Users.
 *
 * @author Trevor Smith
 */
export interface ApplicationRegistrationDeletePolicy {
  unverified?: TimeBasedDeletePolicy;
}

/**
 * The Application API request object.
 *
 * @author Brian Pontarelli
 */
export interface ApplicationRequest {
  application?: Application;
  role?: ApplicationRole;
  webhookIds?: Array<UUID>;
}

/**
 * The Application API response.
 *
 * @author Brian Pontarelli
 */
export interface ApplicationResponse {
  application?: Application;
  applications?: Array<Application>;
  role?: ApplicationRole;
}

/**
 * A role given to a user for a specific application.
 *
 * @author Seth Musselman
 */
export interface ApplicationRole {
  description?: string;
  id?: UUID;
  isDefault?: boolean;
  isSuperRole?: boolean;
  name?: string;
}

/**
 * This class is a simple attachment with a byte array, name and MIME type.
 *
 * @author Brian Pontarelli
 */
export interface Attachment {
  attachment?: Array<number>;
  mime?: string;
  name?: string;
}

/**
 * An audit log.
 *
 * @author Brian Pontarelli
 */
export interface AuditLog {
  data?: Record<string, any>;
  id?: number;
  insertInstant?: number;
  insertUser?: string;
  message?: string;
  newValue?: any;
  oldValue?: any;
  reason?: string;
}

export interface AuditLogConfiguration {
  delete?: DeleteConfiguration;
}

/**
 * @author Daniel DeGroff
 */
export interface AuditLogExportRequest extends BaseExportRequest {
  criteria?: AuditLogSearchCriteria;
}

/**
 * @author Brian Pontarelli
 */
export interface AuditLogRequest {
  auditLog?: AuditLog;
}

/**
 * Audit log response.
 *
 * @author Brian Pontarelli
 */
export interface AuditLogResponse {
  auditLog?: AuditLog;
}

/**
 * @author Brian Pontarelli
 */
export interface AuditLogSearchCriteria extends BaseSearchCriteria {
  end?: number;
  message?: string;
  start?: number;
  user?: string;
}

/**
 * @author Brian Pontarelli
 */
export interface AuditLogSearchRequest {
  search?: AuditLogSearchCriteria;
}

/**
 * Audit log response.
 *
 * @author Brian Pontarelli
 */
export interface AuditLogSearchResponse {
  auditLogs?: Array<AuditLog>;
  total?: number;
}

export interface AuthenticationTokenConfiguration extends Enableable {
}

/**
 * Base-class for all FusionAuth events.
 *
 * @author Brian Pontarelli
 */
export interface BaseEvent {
  createInstant?: number;
  id?: UUID;
  tenantId?: UUID;
}

/**
 * @author Daniel DeGroff
 */
export interface BaseExportRequest {
  dateTimeSecondsFormat?: string;
  zoneId?: string;
}

// Do not require a setter for 'type', it is defined by the concrete class and is not mutable
export interface BaseIdentityProvider<D extends BaseIdentityProviderApplicationConfiguration> extends Enableable {
  applicationConfiguration?: Record<UUID, D>;
  data?: Record<string, any>;
  debug?: boolean;
  id?: UUID;
  lambdaConfiguration?: LambdaConfiguration;
  name?: string;
  type?: IdentityProviderType;
}

/**
 * @author Daniel DeGroff
 */
export interface BaseIdentityProviderApplicationConfiguration extends Enableable {
  createRegistration?: boolean;
  data?: Record<string, any>;
}

/**
 * @author Daniel DeGroff
 */
export interface BaseLoginRequest {
  applicationId?: UUID;
  ipAddress?: string;
  metaData?: MetaData;
  noJWT?: boolean;
}

/**
 * @author Brian Pontarelli
 */
export interface BaseSearchCriteria {
  numberOfResults?: number;
  orderBy?: string;
  startRow?: number;
}

export enum BreachAction {
  Off,
  RecordOnly,
  NotifyUser,
  RequireChange
}

/**
 * @author Daniel DeGroff
 */
export enum BreachedPasswordStatus {
  None,
  ExactMatch,
  SubAddressMatch,
  PasswordOnly,
  CommonPassword
}

export enum BreachMatchMode {
  Low,
  Medium,
  High
}

export enum CanonicalizationMethod {
  exclusive,
  exclusive_with_comments,
  inclusive,
  inclusive_with_comments
}

export interface CertificateInformation {
  issuer?: string;
  md5Fingerprint?: string;
  serialNumber?: string;
  sha1Fingerprint?: string;
  sha1Thumbprint?: string;
  sha256Fingerprint?: string;
  sha256Thumbprint?: string;
  subject?: string;
  validFrom?: number;
  validTo?: number;
}

/**
 * @author Trevor Smith
 */
export enum ChangePasswordReason {
  Administrative,
  Breached,
  Expired,
  Validation
}

/**
 * Change password request object.
 *
 * @author Brian Pontarelli
 */
export interface ChangePasswordRequest {
  currentPassword?: string;
  loginId?: string;
  password?: string;
  refreshToken?: string;
}

/**
 * Change password response object.
 *
 * @author Daniel DeGroff
 */
export interface ChangePasswordResponse {
  oneTimePassword?: string;
  state?: Record<string, any>;
}

/**
 * CleanSpeak configuration at the system and application level.
 *
 * @author Brian Pontarelli
 */
export interface CleanSpeakConfiguration extends Enableable {
  apiKey?: string;
  applicationIds?: Array<UUID>;
  url?: string;
  usernameModeration?: UsernameModeration;
}

export enum ClientAuthenticationMethod {
  none,
  client_secret_basic,
  client_secret_post
}

/**
 * Models a consent.
 *
 * @author Daniel DeGroff
 */
export interface Consent {
  consentEmailTemplateId?: UUID;
  countryMinimumAgeForSelfConsent?: LocalizedIntegers;
  data?: Record<string, any>;
  defaultMinimumAgeForSelfConsent?: number;
  emailPlus?: EmailPlus;
  id?: UUID;
  multipleValuesAllowed?: boolean;
  name?: string;
  values?: Array<string>;
}

/**
 * API request for User consent types.
 *
 * @author Daniel DeGroff
 */
export interface ConsentRequest {
  consent?: Consent;
}

/**
 * API response for consent.
 *
 * @author Daniel DeGroff
 */
export interface ConsentResponse {
  consent?: Consent;
  consents?: Array<Consent>;
}

/**
 * Models a consent.
 *
 * @author Daniel DeGroff
 */
export enum ConsentStatus {
  Active,
  Revoked
}

/**
 * Status for content like usernames, profile attributes, etc.
 *
 * @author Brian Pontarelli
 */
export enum ContentStatus {
  ACTIVE,
  PENDING,
  REJECTED
}

/**
 * @author Trevor Smith
 */
export interface CORSConfiguration extends Enableable {
  allowCredentials?: boolean;
  allowedHeaders?: Array<string>;
  allowedMethods?: Array<HTTPMethod>;
  allowedOrigins?: Array<string>;
  exposedHeaders?: Array<string>;
  preflightMaxAgeInSeconds?: number;
}

/**
 * @author Brian Pontarelli
 */
export interface Count {
  count?: number;
  interval?: number;
}

/**
 * Response for the daily active user report.
 *
 * @author Brian Pontarelli
 */
export interface DailyActiveUserReportResponse {
  dailyActiveUsers?: Array<Count>;
  total?: number;
}

export interface DeleteConfiguration extends Enableable {
  numberOfDaysToRetain?: number;
}

/**
 * @author Daniel DeGroff
 */
export interface DeviceInfo {
  description?: string;
  lastAccessedAddress?: string;
  lastAccessedInstant?: number;
  name?: string;
  type?: DeviceType;
}

/**
 * @author Trevor Smith
 */
export interface DeviceResponse {
  device_code?: string;
  expires_in?: number;
  interval?: number;
  user_code?: string;
  verification_uri?: string;
  verification_uri_complete?: string;
}

export enum DeviceType {
  BROWSER,
  DESKTOP,
  LAPTOP,
  MOBILE,
  OTHER,
  SERVER,
  TABLET,
  TV,
  UNKNOWN
}

/**
 * A displayable raw login that includes application name and user loginId.
 *
 * @author Brian Pontarelli
 */
export interface DisplayableRawLogin extends RawLogin {
  applicationName?: string;
  loginId?: string;
}

/**
 * Interface for all identity providers that can be domain based.
 */
export interface DomainBasedIdentityProvider {
}

/**
 * This class is an abstraction of a simple email message.
 *
 * @author Brian Pontarelli
 */
export interface Email {
  attachments?: Array<Attachment>;
  bcc?: Array<EmailAddress>;
  cc?: Array<EmailAddress>;
  from?: EmailAddress;
  html?: string;
  replyTo?: EmailAddress;
  subject?: string;
  text?: string;
  to?: Array<EmailAddress>;
}

/**
 * An email address.
 *
 * @author Brian Pontarelli
 */
export interface EmailAddress {
  address?: string;
  display?: string;
}

/**
 * @author Brian Pontarelli
 */
export interface EmailConfiguration {
  defaultFromEmail?: string;
  defaultFromName?: string;
  forgotPasswordEmailTemplateId?: UUID;
  host?: string;
  password?: string;
  passwordlessEmailTemplateId?: UUID;
  port?: number;
  properties?: string;
  security?: EmailSecurityType;
  setPasswordEmailTemplateId?: UUID;
  username?: string;
  verificationEmailTemplateId?: UUID;
  verifyEmail?: boolean;
  verifyEmailWhenChanged?: boolean;
}

export interface EmailPlus extends Enableable {
  emailTemplateId?: UUID;
  maximumTimeToSendEmailInHours?: number;
  minimumTimeToSendEmailInHours?: number;
}

export enum EmailSecurityType {
  NONE,
  SSL,
  TLS
}

/**
 * Stores an email template used to send emails to users.
 *
 * @author Brian Pontarelli
 */
export interface EmailTemplate {
  defaultFromName?: string;
  defaultHtmlTemplate?: string;
  defaultSubject?: string;
  defaultTextTemplate?: string;
  fromEmail?: string;
  id?: UUID;
  localizedFromNames?: LocalizedStrings;
  localizedHtmlTemplates?: LocalizedStrings;
  localizedSubjects?: LocalizedStrings;
  localizedTextTemplates?: LocalizedStrings;
  name?: string;
}

export interface EmailTemplateErrors {
  parseErrors?: Record<string, string>;
  renderErrors?: Record<string, string>;
}

/**
 * Email template request.
 *
 * @author Brian Pontarelli
 */
export interface EmailTemplateRequest {
  emailTemplate?: EmailTemplate;
}

/**
 * Email template response.
 *
 * @author Brian Pontarelli
 */
export interface EmailTemplateResponse {
  emailTemplate?: EmailTemplate;
  emailTemplates?: Array<EmailTemplate>;
}

/**
 * Something that can be enabled and thus also disabled.
 *
 * @author Daniel DeGroff
 */
export interface Enableable {
  enabled?: boolean;
}

/**
 * Defines an error.
 *
 * @author Brian Pontarelli
 */
export interface Error {
  code?: string;
  message?: string;
}

/**
 * Standard error domain object that can also be used as the response from an API call.
 *
 * @author Brian Pontarelli
 */
export interface Errors {
  fieldErrors?: Record<string, Array<Error>>;
  generalErrors?: Array<Error>;
}

/**
 * @author Brian Pontarelli
 */
export interface EventConfiguration {
  events?: Record<EventType, EventConfigurationData>;
}

export interface EventConfigurationData extends Enableable {
  transactionType?: TransactionType;
}

/**
 * Event log used internally by FusionAuth to help developers debug hooks, Webhooks, email templates, etc.
 *
 * @author Brian Pontarelli
 */
export interface EventLog {
  id?: number;
  insertInstant?: number;
  message?: string;
  type?: EventLogType;
}

export interface EventLogConfiguration {
  numberToRetain?: number;
}

/**
 * Event log response.
 *
 * @author Daniel DeGroff
 */
export interface EventLogResponse {
  eventLog?: EventLog;
}

/**
 * Search criteria for the event log.
 *
 * @author Brian Pontarelli
 */
export interface EventLogSearchCriteria extends BaseSearchCriteria {
  end?: number;
  message?: string;
  start?: number;
  type?: EventLogType;
}

/**
 * @author Brian Pontarelli
 */
export interface EventLogSearchRequest {
  search?: EventLogSearchCriteria;
}

/**
 * Event log response.
 *
 * @author Brian Pontarelli
 */
export interface EventLogSearchResponse {
  eventLogs?: Array<EventLog>;
  total?: number;
}

/**
 * Event Log Type
 *
 * @author Daniel DeGroff
 */
export enum EventLogType {
  Information,
  Debug,
  Error
}

/**
 * Container for the event information. This is the JSON that is sent from FusionAuth to webhooks.
 *
 * @author Brian Pontarelli
 */
export interface EventRequest {
  event?: BaseEvent;
}

/**
 * Models the event types that FusionAuth produces.
 *
 * @author Brian Pontarelli
 */
export enum EventType {
  UserDelete = "user.delete",
  UserCreate = "user.create",
  UserUpdate = "user.update",
  UserDeactivate = "user.deactivate",
  UserBulkCreate = "user.bulk.create",
  UserReactivate = "user.reactivate",
  UserAction = "user.action",
  JWTRefreshTokenRevoke = "jwt.refresh-token.revoke",
  JWTRefresh = "jwt.refresh",
  JWTPublicKeyUpdate = "jwt.public-key.update",
  UserLoginSuccess = "user.login.success",
  UserLoginFailed = "user.login.failed",
  UserRegistrationCreate = "user.registration.create",
  UserRegistrationUpdate = "user.registration.update",
  UserRegistrationDelete = "user.registration.delete",
  UserRegistrationVerified = "user.registration.verified",
  UserEmailVerified = "user.email.verified",
  UserPasswordBreach = "user.password.breach",
  Test = "test"
}

/**
 * @author Brian Pontarelli
 */
export enum ExpiryUnit {
  MINUTES,
  HOURS,
  DAYS,
  WEEKS,
  MONTHS,
  YEARS
}

/**
 * @author Daniel DeGroff
 */
export interface ExternalIdentifierConfiguration {
  authorizationGrantIdTimeToLiveInSeconds?: number;
  changePasswordIdGenerator?: SecureGeneratorConfiguration;
  changePasswordIdTimeToLiveInSeconds?: number;
  deviceCodeTimeToLiveInSeconds?: number;
  deviceUserCodeIdGenerator?: SecureGeneratorConfiguration;
  emailVerificationIdGenerator?: SecureGeneratorConfiguration;
  emailVerificationIdTimeToLiveInSeconds?: number;
  externalAuthenticationIdTimeToLiveInSeconds?: number;
  oneTimePasswordTimeToLiveInSeconds?: number;
  passwordlessLoginGenerator?: SecureGeneratorConfiguration;
  passwordlessLoginTimeToLiveInSeconds?: number;
  registrationVerificationIdGenerator?: SecureGeneratorConfiguration;
  registrationVerificationIdTimeToLiveInSeconds?: number;
  setupPasswordIdGenerator?: SecureGeneratorConfiguration;
  setupPasswordIdTimeToLiveInSeconds?: number;
  twoFactorIdTimeToLiveInSeconds?: number;
  twoFactorTrustIdTimeToLiveInSeconds?: number;
}

/**
 * @author Daniel DeGroff
 */
export interface ExternalJWTApplicationConfiguration extends BaseIdentityProviderApplicationConfiguration {
}

/**
 * External JWT-only identity provider.
 *
 * @author Daniel DeGroff and Brian Pontarelli
 */
export interface ExternalJWTIdentityProvider extends BaseIdentityProvider<ExternalJWTApplicationConfiguration> {
  claimMap?: Record<string, string>;
  defaultKeyId?: UUID;
  domains?: Array<string>;
  headerKeyParameter?: string;
  oauth2?: IdentityProviderOauth2Configuration;
  uniqueIdentityClaim?: string;
}

/**
 * @author Daniel DeGroff
 */
export interface FacebookApplicationConfiguration extends BaseIdentityProviderApplicationConfiguration {
  appId?: string;
  buttonText?: string;
  client_secret?: string;
  fields?: string;
  permissions?: string;
}

/**
 * Facebook social login provider.
 *
 * @author Brian Pontarelli
 */
export interface FacebookIdentityProvider extends BaseIdentityProvider<FacebookApplicationConfiguration> {
  appId?: string;
  buttonText?: string;
  client_secret?: string;
  fields?: string;
  permissions?: string;
}

/**
 * Configuration for the behavior of failed login attempts. This helps us protect against brute force password attacks.
 *
 * @author Daniel DeGroff
 */
export interface FailedAuthenticationConfiguration {
  actionDuration?: number;
  actionDurationUnit?: ExpiryUnit;
  resetCountInSeconds?: number;
  tooManyAttempts?: number;
  userActionId?: UUID;
}

/**
 * Models a family grouping of users.
 *
 * @author Brian Pontarelli
 */
export interface Family {
  id?: UUID;
  members?: Array<FamilyMember>;
}

/**
 * @author Brian Pontarelli
 */
export interface FamilyConfiguration extends Enableable {
  allowChildRegistrations?: boolean;
  confirmChildEmailTemplateId?: UUID;
  deleteOrphanedAccounts?: boolean;
  deleteOrphanedAccountsDays?: number;
  familyRequestEmailTemplateId?: UUID;
  maximumChildAge?: number;
  minimumOwnerAge?: number;
  parentEmailRequired?: boolean;
  parentRegistrationEmailTemplateId?: UUID;
}

/**
 * API request for sending out family requests to parent's.
 *
 * @author Brian Pontarelli
 */
export interface FamilyEmailRequest {
  parentEmail?: string;
}

/**
 * Models a single family member.
 *
 * @author Brian Pontarelli
 */
export interface FamilyMember {
  data?: Record<string, any>;
  insertInstant?: number;
  owner?: boolean;
  role?: FamilyRole;
  userId?: UUID;
}

/**
 * API request for managing families and members.
 *
 * @author Brian Pontarelli
 */
export interface FamilyRequest {
  familyMember?: FamilyMember;
}

/**
 * API response for managing families and members.
 *
 * @author Brian Pontarelli
 */
export interface FamilyResponse {
  families?: Array<Family>;
  family?: Family;
}

export enum FamilyRole {
  Child,
  Teen,
  Adult
}

/**
 * Forgot password request object.
 *
 * @author Brian Pontarelli
 */
export interface ForgotPasswordRequest {
  changePasswordId?: string;
  email?: string;
  loginId?: string;
  sendForgotPasswordEmail?: boolean;
  state?: Record<string, any>;
  username?: string;
}

/**
 * Forgot password response object.
 *
 * @author Daniel DeGroff
 */
export interface ForgotPasswordResponse {
  changePasswordId?: string;
}

/**
 * @author Daniel DeGroff
 */
export interface GoogleApplicationConfiguration extends BaseIdentityProviderApplicationConfiguration {
  buttonText?: string;
  client_id?: string;
  client_secret?: string;
  scope?: string;
}

/**
 * Google social login provider.
 *
 * @author Daniel DeGroff
 */
export interface GoogleIdentityProvider extends BaseIdentityProvider<GoogleApplicationConfiguration> {
  buttonText?: string;
  client_id?: string;
  client_secret?: string;
  scope?: string;
}

/**
 * Authorization Grant types as defined by the <a href="https://tools.ietf.org/html/rfc6749">The OAuth 2.0 Authorization
 * Framework - RFC 6749</a>.
 * <p>
 * Specific names as defined by <a href="https://tools.ietf.org/html/rfc7591#section-4.1">
 * OAuth 2.0 Dynamic Client Registration Protocol - RFC 7591 Section 4.1</a>
 *
 * @author Daniel DeGroff
 */
export enum GrantType {
  authorization_code = "authorization_code",
  implicit = "implicit",
  password = "password",
  client_credentials = "client_credentials",
  refresh_token = "refresh_token",
  unknown = "unknown",
  device_code = "urn:ietf:params:oauth:grant-type:device_code"
}

/**
 * @author Tyler Scott
 */
export interface Group {
  data?: Record<string, any>;
  id?: UUID;
  name?: string;
  roles?: Record<UUID, Array<ApplicationRole>>;
  tenantId?: UUID;
}

/**
 * A User's membership into a Group
 *
 * @author Daniel DeGroff
 */
export interface GroupMember {
  data?: Record<string, any>;
  groupId?: UUID;
  id?: UUID;
  insertInstant?: number;
  userId?: UUID;
}

/**
 * Group API request object.
 *
 * @author Daniel DeGroff
 */
export interface GroupRequest {
  group?: Group;
  roleIds?: Array<UUID>;
}

/**
 * Group API response object.
 *
 * @author Daniel DeGroff
 */
export interface GroupResponse {
  group?: Group;
  groups?: Array<Group>;
}

export interface HistoryItem {
  actionerUserId?: UUID;
  comment?: string;
  createInstant?: number;
  expiry?: number;
}

/**
 * Type for webhook headers.
 *
 * @author Brian Pontarelli
 */
export interface HTTPHeaders extends Record<string, string> {
}

/**
 * @author Daniel DeGroff
 */
export enum HTTPMethod {
  GET,
  POST,
  PUT,
  DELETE,
  HEAD,
  OPTIONS,
  PATCH
}

/**
 * @author Daniel DeGroff
 */
export interface HYPRApplicationConfiguration extends BaseIdentityProviderApplicationConfiguration {
  relyingPartyApplicationId?: string;
  relyingPartyURL?: string;
}

/**
 * @author Daniel DeGroff
 */
export interface HYPRIdentityProvider extends BaseIdentityProvider<HYPRApplicationConfiguration> {
  relyingPartyApplicationId?: string;
  relyingPartyURL?: string;
}

export interface IdentityProviderDetails {
  applicationIds?: Array<UUID>;
  id?: UUID;
  idpEndpoint?: string;
  name?: string;
  oauth2?: IdentityProviderOauth2Configuration;
  type?: IdentityProviderType;
}

/**
 * Login API request object used for login to third-party systems (i.e. Login with Facebook).
 *
 * @author Brian Pontarelli
 */
export interface IdentityProviderLoginRequest extends BaseLoginRequest {
  data?: Record<string, string>;
  encodedJWT?: string;
  identityProviderId?: UUID;
}

/**
 * @author Daniel DeGroff
 */
export interface IdentityProviderOauth2Configuration {
  authorization_endpoint?: string;
  client_id?: string;
  client_secret?: string;
  clientAuthenticationMethod?: ClientAuthenticationMethod;
  issuer?: string;
  scope?: string;
  token_endpoint?: string;
  userinfo_endpoint?: string;
}

/**
 * @author Daniel DeGroff
 */
export interface IdentityProviderRequest {
  identityProvider?: BaseIdentityProvider<any>;
}

/**
 * @author Daniel DeGroff
 */
export interface IdentityProviderResponse {
  identityProvider?: BaseIdentityProvider<any>;
  identityProviders?: Array<BaseIdentityProvider<any>>;
}

/**
 * @author Daniel DeGroff
 */
export interface IdentityProviderStartLoginRequest extends BaseLoginRequest {
  identityProviderId?: UUID;
  loginId?: string;
  state?: Record<string, any>;
}

/**
 * @author Daniel DeGroff
 */
export interface IdentityProviderStartLoginResponse {
  code?: string;
}

export enum IdentityProviderType {
  ExternalJWT,
  OpenIDConnect,
  Facebook,
  Google,
  Twitter,
  SAMLv2,
  HYPR,
  Apple
}

/**
 * Import request.
 *
 * @author Brian Pontarelli
 */
export interface ImportRequest {
  encryptionScheme?: string;
  factor?: number;
  users?: Array<User>;
  validateDbConstraints?: boolean;
}

/**
 * The Integration Request
 *
 * @author Daniel DeGroff
 */
export interface IntegrationRequest {
  integrations?: Integrations;
}

/**
 * The Integration Response
 *
 * @author Daniel DeGroff
 */
export interface IntegrationResponse {
  integrations?: Integrations;
}

/**
 * Available Integrations
 *
 * @author Daniel DeGroff
 */
export interface Integrations {
  cleanspeak?: CleanSpeakConfiguration;
  kafka?: KafkaConfiguration;
  twilio?: TwilioConfiguration;
}

/**
 * Counts for a period.
 *
 * @author Brian Pontarelli
 */
export interface IntervalCount {
  applicationId?: UUID;
  count?: number;
  decrementedCount?: number;
  period?: number;
}

/**
 * A user over an period (for daily and monthly active user calculations).
 *
 * @author Brian Pontarelli
 */
export interface IntervalUser {
  applicationId?: UUID;
  period?: number;
  userId?: UUID;
}

/**
 * @author Daniel DeGroff
 */
export interface IntrospectResponse extends Record<string, any> {
}

/**
 * @author Daniel DeGroff
 */
export interface IssueResponse {
  refreshToken?: string;
  token?: string;
}

/**
 * A JSON Web Key as defined by <a href="https://tools.ietf.org/html/rfc7517#section-4">RFC 7517 JSON Web Key (JWK)
 * Section 4</a> and <a href="https://tools.ietf.org/html/rfc7518">RFC 7518 JSON Web Algorithms (JWA)</a>.
 *
 * @author Daniel DeGroff
 */
export interface JSONWebKey {
  alg?: Algorithm;
  crv?: string;
  d?: string;
  dp?: string;
  dq?: string;
  e?: string;
  kid?: string;
  kty?: KeyType;
  n?: string;
  [other: string]: any; // Any other fields
  p?: string;
  q?: string;
  qi?: string;
  use?: string;
  x?: string;
  x5c?: Array<string>;
  x5t?: string;
  x5t_S256?: string;
  y?: string;
}

/**
 * Interface for any object that can provide JSON Web key Information.
 */
export interface JSONWebKeyInfoProvider {
}

/**
 * @author Daniel DeGroff
 */
export interface JWKSResponse {
  keys?: Array<JSONWebKey>;
}

/**
 * JSON Web Token (JWT) as defined by RFC 7519.
 * <pre>
 * From RFC 7519 Section 1. Introduction:
 *    The suggested pronunciation of JWT is the same as the English word "jot".
 * </pre>
 * The JWT is not Thread-Safe and should not be re-used.
 *
 * @author Daniel DeGroff
 */
export interface JWT {
  aud?: any;
  exp?: number;
  iat?: number;
  iss?: string;
  jti?: string;
  nbf?: number;
  [otherClaims: string]: any; // Any other fields
  sub?: string;
}

/**
 * JWT Configuration. A JWT Configuration for an Application may not be active if it is using the global configuration, the configuration
 * may be <code>enabled = false</code>.
 *
 * @author Daniel DeGroff
 */
export interface JWTConfiguration extends Enableable {
  accessTokenKeyId?: UUID;
  idTokenKeyId?: UUID;
  refreshTokenExpirationPolicy?: RefreshTokenExpirationPolicy;
  refreshTokenRevocationPolicy?: RefreshTokenRevocationPolicy;
  refreshTokenTimeToLiveInMinutes?: number;
  refreshTokenUsagePolicy?: RefreshTokenUsagePolicy;
  timeToLiveInSeconds?: number;
}

/**
 * Models the JWT public key Refresh Token Revoke Event (and can be converted to JSON). This event might be for a single
 * token, a user or an entire application.
 *
 * @author Brian Pontarelli
 */
export interface JWTPublicKeyUpdateEvent extends BaseEvent {
  applicationIds?: Array<UUID>;
}

/**
 * Models the JWT Refresh Event. This event will be fired when a JWT is "refreshed" (generated) using a Refresh Token.
 *
 * @author Daniel DeGroff
 */
export interface JWTRefreshEvent extends BaseEvent {
  applicationId?: UUID;
  original?: string;
  refreshToken?: string;
  token?: string;
  userId?: UUID;
}

/**
 * Models the Refresh Token Revoke Event (and can be converted to JSON). This event might be for a single token, a user
 * or an entire application.
 *
 * @author Brian Pontarelli
 */
export interface JWTRefreshTokenRevokeEvent extends BaseEvent {
  applicationId?: UUID;
  applicationTimeToLiveInSeconds?: Record<UUID, number>;
  user?: User;
  userId?: UUID;
}

/**
 * @author Daniel DeGroff
 */
export interface KafkaConfiguration extends Enableable {
  defaultTopic?: string;
  producer?: Record<string, string>;
}

/**
 * Domain for a public key, key pair or an HMAC secret. This is used by KeyMaster to manage keys for JWTs, SAML, etc.
 *
 * @author Brian Pontarelli
 */
export interface Key {
  algorithm?: KeyAlgorithm;
  certificate?: string;
  certificateInformation?: CertificateInformation;
  expirationInstant?: number;
  hasPrivateKey?: boolean;
  id?: UUID;
  insertInstant?: number;
  issuer?: string;
  kid?: string;
  length?: number;
  name?: string;
  privateKey?: string;
  publicKey?: string;
  secret?: string;
  type?: KeyType;
}

export enum KeyAlgorithm {
  ES256 = "SHA256withECDSA",
  ES384 = "SHA384withECDSA",
  ES512 = "SHA512withECDSA",
  HS256 = "HmacSHA256",
  HS384 = "HmacSHA384",
  HS512 = "HmacSHA512",
  RS256 = "SHA256withRSA",
  RS384 = "SHA384withRSA",
  RS512 = "SHA512withRSA"
}

/**
 * Key API request object.
 *
 * @author Daniel DeGroff
 */
export interface KeyRequest {
  key?: Key;
}

/**
 * Key API response object.
 *
 * @author Daniel DeGroff
 */
export interface KeyResponse {
  key?: Key;
  keys?: Array<Key>;
}

export enum KeyType {
  EC,
  RSA,
  HMAC
}

/**
 * A JavaScript lambda function that is executed during certain events inside FusionAuth.
 *
 * @author Brian Pontarelli
 */
export interface Lambda extends Enableable {
  body?: string;
  debug?: boolean;
  id?: UUID;
  insertInstant?: number;
  name?: string;
  type?: LambdaType;
}

export interface LambdaConfiguration {
  accessTokenPopulateId?: UUID;
  idTokenPopulateId?: UUID;
  samlv2PopulateId?: UUID;
}

export interface LambdaConfiguration {
  reconcileId?: UUID;
}

/**
 * Lambda API request object.
 *
 * @author Brian Pontarelli
 */
export interface LambdaRequest {
  lambda?: Lambda;
}

/**
 * Lambda API response object.
 *
 * @author Brian Pontarelli
 */
export interface LambdaResponse {
  lambda?: Lambda;
  lambdas?: Array<Lambda>;
}

/**
 * The types of lambdas that indicate how they are invoked by FusionAuth.
 *
 * @author Brian Pontarelli
 */
export enum LambdaType {
  JWTPopulate,
  OpenIDReconcile,
  SAMLv2Reconcile,
  SAMLv2Populate,
  AppleReconcile,
  ExternalJWTReconcile,
  FacebookReconcile,
  GoogleReconcile,
  HYPRReconcile,
  TwitterReconcile
}

/**
 * Models a set of localized Integers that can be stored as JSON.
 *
 * @author Daniel DeGroff
 */
export interface LocalizedIntegers extends Record<string, number> {
}

/**
 * Models a set of localized Strings that can be stored as JSON.
 *
 * @author Brian Pontarelli
 */
export interface LocalizedStrings extends Record<string, string> {
}

/**
 * A historical state of a user log event. Since events can be modified, this stores the historical state.
 *
 * @author Brian Pontarelli
 */
export interface LogHistory {
  historyItems?: Array<HistoryItem>;
}

export interface LoginConfiguration {
  allowTokenRefresh?: boolean;
  generateRefreshTokens?: boolean;
  requireAuthentication?: boolean;
}

export enum LoginIdType {
  email,
  username
}

/**
 * The summary of the action that is preventing login to be returned on the login response.
 *
 * @author Daniel DeGroff
 */
export interface LoginPreventedResponse {
  actionerUserId?: UUID;
  actionId?: UUID;
  expiry?: number;
  localizedName?: string;
  localizedOption?: string;
  localizedReason?: string;
  name?: string;
  option?: string;
  reason?: string;
  reasonCode?: string;
}

export interface LoginRecordConfiguration {
  delete?: DeleteConfiguration;
}

/**
 * @author Daniel DeGroff
 */
export interface LoginRecordExportRequest extends BaseExportRequest {
  criteria?: LoginRecordSearchCriteria;
}

/**
 * @author Daniel DeGroff
 */
export interface LoginRecordSearchCriteria extends BaseSearchCriteria {
  applicationId?: UUID;
  end?: number;
  start?: number;
  userId?: UUID;
}

/**
 * @author Daniel DeGroff
 */
export interface LoginRecordSearchRequest {
  retrieveTotal?: boolean;
  search?: LoginRecordSearchCriteria;
}

/**
 * A raw login record response
 *
 * @author Daniel DeGroff
 */
export interface LoginRecordSearchResponse {
  logins?: Array<DisplayableRawLogin>;
  total?: number;
}

/**
 * Response for the login report.
 *
 * @author Brian Pontarelli
 */
export interface LoginReportResponse {
  hourlyCounts?: Array<Count>;
  total?: number;
}

/**
 * Login API request object.
 *
 * @author Seth Musselman
 */
export interface LoginRequest extends BaseLoginRequest {
  loginId?: string;
  oneTimePassword?: string;
  password?: string;
  twoFactorTrustId?: string;
}

/**
 * @author Brian Pontarelli
 */
export interface LoginResponse {
  actions?: Array<LoginPreventedResponse>;
  changePasswordId?: string;
  changePasswordReason?: ChangePasswordReason;
  refreshToken?: string;
  state?: Record<string, any>;
  token?: string;
  twoFactorId?: string;
  twoFactorTrustId?: string;
  user?: User;
}

/**
 * @author Matthew Altman
 */
export enum LogoutBehavior {
  RedirectOnly,
  AllApplications
}

/**
 * @author Daniel DeGroff
 */
export interface LookupResponse {
  identityProvider?: IdentityProviderDetails;
}

/**
 * @author Daniel DeGroff
 */
export interface MaximumPasswordAge extends Enableable {
  days?: number;
}

/**
 * Group Member Delete Request
 *
 * @author Daniel DeGroff
 */
export interface MemberDeleteRequest {
  memberIds?: Array<UUID>;
  members?: Record<UUID, Array<UUID>>;
}

/**
 * Group Member Request
 *
 * @author Daniel DeGroff
 */
export interface MemberRequest {
  members?: Record<UUID, Array<GroupMember>>;
}

/**
 * Group Member Response
 *
 * @author Daniel DeGroff
 */
export interface MemberResponse {
  members?: Record<UUID, Array<GroupMember>>;
}

export interface MetaData {
  device?: DeviceInfo;
  scopes?: Array<string>;
}

/**
 * @author Daniel DeGroff
 */
export interface MinimumPasswordAge extends Enableable {
  seconds?: number;
}

/**
 * Response for the daily active user report.
 *
 * @author Brian Pontarelli
 */
export interface MonthlyActiveUserReportResponse {
  monthlyActiveUsers?: Array<Count>;
  total?: number;
}

/**
 * Helper methods for normalizing values.
 *
 * @author Brian Pontarelli
 */
export interface Normalizer {
}

/**
 * @author Daniel DeGroff
 */
export interface OAuth2Configuration {
  authorizedOriginURLs?: Array<string>;
  authorizedRedirectURLs?: Array<string>;
  clientId?: string;
  clientSecret?: string;
  deviceVerificationURL?: string;
  enabledGrants?: Array<GrantType>;
  generateRefreshTokens?: boolean;
  logoutBehavior?: LogoutBehavior;
  logoutURL?: string;
  requireClientAuthentication?: boolean;
}

/**
 * @author Daniel DeGroff
 */
export interface OAuthConfigurationResponse {
  httpSessionMaxInactiveInterval?: number;
  logoutURL?: string;
  oauthConfiguration?: OAuth2Configuration;
}

/**
 * @author Daniel DeGroff
 */
export interface OAuthError {
  change_password_id?: string;
  error?: OAuthErrorType;
  error_description?: string;
  error_reason?: OAuthErrorReason;
  error_uri?: string;
  two_factor_id?: string;
}

export enum OAuthErrorReason {
  auth_code_not_found,
  access_token_malformed,
  access_token_expired,
  access_token_unavailable_for_processing,
  access_token_failed_processing,
  refresh_token_not_found,
  invalid_client_id,
  invalid_user_credentials,
  invalid_grant_type,
  invalid_origin,
  invalid_origin_opaque,
  invalid_pkce_code_verifier,
  invalid_pkce_code_challenge,
  invalid_pkce_code_challenge_method,
  invalid_redirect_uri,
  invalid_response_mode,
  invalid_response_type,
  invalid_id_token_hint,
  invalid_post_logout_redirect_uri,
  invalid_device_code,
  invalid_user_code,
  invalid_additional_client_id,
  grant_type_disabled,
  missing_client_id,
  missing_code,
  missing_device_code,
  missing_grant_type,
  missing_redirect_uri,
  missing_refresh_token,
  missing_response_type,
  missing_token,
  missing_user_code,
  missing_verification_uri,
  login_prevented,
  user_code_expired,
  user_expired,
  user_locked,
  user_not_found,
  client_authentication_missing,
  invalid_client_authentication_scheme,
  invalid_client_authentication,
  client_id_mismatch,
  change_password_administrative,
  change_password_breached,
  change_password_expired,
  change_password_validation,
  unknown
}

export enum OAuthErrorType {
  invalid_request,
  invalid_client,
  invalid_grant,
  invalid_token,
  unauthorized_client,
  invalid_scope,
  server_error,
  unsupported_grant_type,
  unsupported_response_type,
  change_password_required,
  two_factor_required,
  authorization_pending,
  expired_token
}

/**
 * @author Daniel DeGroff
 */
export interface OAuthResponse {
}

/**
 * OpenID Connect Configuration as described by the <a href="https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata">OpenID
 * Provider Metadata</a>.
 *
 * @author Daniel DeGroff
 */
export interface OpenIdConfiguration {
  authorization_endpoint?: string;
  backchannel_logout_supported?: boolean;
  claims_supported?: Array<string>;
  device_authorization_endpoint?: string;
  end_session_endpoint?: string;
  frontchannel_logout_supported?: boolean;
  grant_types_supported?: Array<string>;
  id_token_signing_alg_values_supported?: Array<string>;
  issuer?: string;
  jwks_uri?: string;
  response_modes_supported?: Array<string>;
  response_types_supported?: Array<string>;
  scopes_supported?: Array<string>;
  subject_types_supported?: Array<string>;
  token_endpoint?: string;
  token_endpoint_auth_methods_supported?: Array<string>;
  userinfo_endpoint?: string;
  userinfo_signing_alg_values_supported?: Array<string>;
}

/**
 * @author Daniel DeGroff
 */
export interface OpenIdConnectApplicationConfiguration extends BaseIdentityProviderApplicationConfiguration {
  buttonImageURL?: string;
  buttonText?: string;
  oauth2?: IdentityProviderOauth2Configuration;
}

/**
 * @author Daniel DeGroff
 */
export interface OpenIdConnectIdentityProvider extends BaseIdentityProvider<OpenIdConnectApplicationConfiguration> {
  buttonImageURL?: string;
  buttonText?: string;
  domains?: Array<string>;
  oauth2?: IdentityProviderOauth2Configuration;
}

/**
 * @author Daniel DeGroff
 */
export interface PasswordBreachDetection extends Enableable {
  matchMode?: BreachMatchMode;
  notifyUserEmailTemplateId?: UUID;
  onLogin?: BreachAction;
}

/**
 * Password Encryption Scheme Configuration
 *
 * @author Daniel DeGroff
 */
export interface PasswordEncryptionConfiguration {
  encryptionScheme?: string;
  encryptionSchemeFactor?: number;
  modifyEncryptionSchemeOnLogin?: boolean;
}

export interface PasswordlessConfiguration extends Enableable {
}

/**
 * Interface for all identity providers that are passwordless and do not accept a password.
 */
export interface PasswordlessIdentityProvider {
}

/**
 * @author Daniel DeGroff
 */
export interface PasswordlessLoginRequest extends BaseLoginRequest {
  code?: string;
  twoFactorTrustId?: string;
}

/**
 * @author Daniel DeGroff
 */
export interface PasswordlessSendRequest {
  applicationId?: UUID;
  code?: string;
  loginId?: string;
  state?: Record<string, any>;
}

/**
 * @author Daniel DeGroff
 */
export interface PasswordlessStartRequest {
  applicationId?: UUID;
  loginId?: string;
  state?: Record<string, any>;
}

/**
 * @author Daniel DeGroff
 */
export interface PasswordlessStartResponse {
  code?: string;
}

/**
 * @author Derek Klatt
 */
export interface PasswordValidationRules {
  breachDetection?: PasswordBreachDetection;
  maxLength?: number;
  minLength?: number;
  rememberPreviousPasswords?: RememberPreviousPasswords;
  requireMixedCase?: boolean;
  requireNonAlpha?: boolean;
  requireNumber?: boolean;
  validateOnLogin?: boolean;
}

/**
 * @author Daniel DeGroff
 */
export interface PasswordValidationRulesResponse {
  passwordValidationRules?: PasswordValidationRules;
}

/**
 * @author Brian Pontarelli
 */
export interface PendingResponse {
  users?: Array<User>;
}

/**
 * @author Brian Pontarelli
 */
export interface PreviewRequest {
  emailTemplate?: EmailTemplate;
  locale?: string;
}

/**
 * @author Seth Musselman
 */
export interface PreviewResponse {
  email?: Email;
  errors?: Errors;
}

/**
 * JWT Public Key Response Object
 *
 * @author Daniel DeGroff
 */
export interface PublicKeyResponse {
  publicKey?: string;
  publicKeys?: Record<string, string>;
}

/**
 * Raw login information for each time a user logs into an application.
 *
 * @author Brian Pontarelli
 */
export interface RawLogin {
  applicationId?: UUID;
  instant?: number;
  ipAddress?: string;
  userId?: UUID;
}

/**
 * Response for the user login report.
 *
 * @author Seth Musselman
 */
export interface RecentLoginResponse {
  logins?: Array<DisplayableRawLogin>;
}

/**
 * @author Daniel DeGroff
 */
export interface RefreshRequest {
  refreshToken?: string;
  token?: string;
}

/**
 * @author Daniel DeGroff
 */
export interface RefreshResponse {
  refreshToken?: string;
  refreshTokens?: Array<RefreshToken>;
  token?: string;
}

/**
 * Models a JWT Refresh Token.
 *
 * @author Daniel DeGroff
 */
export interface RefreshToken {
  applicationId?: UUID;
  insertInstant?: number;
  metaData?: MetaData;
  startInstant?: number;
  token?: string;
  userId?: UUID;
}

/**
 * @author Daniel DeGroff
 */
export enum RefreshTokenExpirationPolicy {
  Fixed,
  SlidingWindow
}

/**
 * @author Daniel DeGroff
 */
export interface RefreshTokenRevocationPolicy {
  onLoginPrevented?: boolean;
  onPasswordChanged?: boolean;
}

/**
 * @author Daniel DeGroff
 */
export enum RefreshTokenUsagePolicy {
  Reusable,
  OneTimeUse
}

export interface RegistrationConfiguration extends Enableable {
  birthDate?: Requirable;
  confirmPassword?: boolean;
  firstName?: Requirable;
  fullName?: Requirable;
  lastName?: Requirable;
  loginIdType?: LoginIdType;
  middleName?: Requirable;
  mobilePhone?: Requirable;
}

/**
 * Response for the registration report.
 *
 * @author Brian Pontarelli
 */
export interface RegistrationReportResponse {
  hourlyCounts?: Array<Count>;
  total?: number;
}

/**
 * Registration API request object.
 *
 * @author Brian Pontarelli
 */
export interface RegistrationRequest {
  generateAuthenticationToken?: boolean;
  registration?: UserRegistration;
  sendSetPasswordEmail?: boolean;
  skipRegistrationVerification?: boolean;
  skipVerification?: boolean;
  user?: User;
}

/**
 * Registration API request object.
 *
 * @author Brian Pontarelli
 */
export interface RegistrationResponse {
  refreshToken?: string;
  registration?: UserRegistration;
  token?: string;
  user?: User;
}

/**
 * @author Daniel DeGroff
 */
export interface ReloadRequest {
  names?: Array<string>;
}

/**
 * @author Daniel DeGroff
 */
export interface RememberPreviousPasswords extends Enableable {
  count?: number;
}

/**
 * Something that can be required and thus also optional. This currently extends Enableable because anything that is
 * require/optional is almost always enableable as well.
 *
 * @author Brian Pontarelli
 */
export interface Requirable extends Enableable {
  required?: boolean;
}

/**
 * Interface describing the need for CORS configuration.
 *
 * @author Daniel DeGroff
 */
export interface RequiresCORSConfiguration {
}

/**
 * @author Brian Pontarelli
 */
export interface SAMLv2ApplicationConfiguration extends BaseIdentityProviderApplicationConfiguration {
  buttonImageURL?: string;
  buttonText?: string;
}

export interface SAMLv2Configuration extends Enableable {
  audience?: string;
  callbackURL?: string;
  debug?: boolean;
  issuer?: string;
  keyId?: UUID;
  logoutURL?: string;
  xmlSignatureC14nMethod?: CanonicalizationMethod;
}

/**
 * SAML v2 identity provider configuration.
 *
 * @author Brian Pontarelli
 */
export interface SAMLv2IdentityProvider extends BaseIdentityProvider<SAMLv2ApplicationConfiguration> {
  buttonImageURL?: string;
  buttonText?: string;
  domains?: Array<string>;
  emailClaim?: string;
  idpEndpoint?: string;
  issuer?: string;
  keyId?: UUID;
  useNameIdForEmail?: boolean;
}

/**
 * Search API request.
 *
 * @author Brian Pontarelli
 */
export interface SearchRequest {
  search?: UserSearchCriteria;
}

/**
 * Search API response.
 *
 * @author Brian Pontarelli
 */
export interface SearchResponse {
  total?: number;
  users?: Array<User>;
}

/**
 * Search results.
 *
 * @author Brian Pontarelli
 */
export interface SearchResults<T> {
  results?: Array<T>;
  total?: number;
}

/**
 * @author Daniel DeGroff
 */
export interface SecretResponse {
  secret?: string;
  secretBase32Encoded?: string;
}

/**
 * @author Daniel DeGroff
 */
export interface SecureGeneratorConfiguration {
  length?: number;
  type?: SecureGeneratorType;
}

/**
 * @author Daniel DeGroff
 */
export enum SecureGeneratorType {
  randomDigits,
  randomBytes,
  randomAlpha,
  randomAlphaNumeric
}

/**
 * @author Daniel DeGroff
 */
export interface SecureIdentity {
  breachedPasswordLastCheckedInstant?: number;
  breachedPasswordStatus?: BreachedPasswordStatus;
  encryptionScheme?: string;
  factor?: number;
  id?: UUID;
  password?: string;
  passwordChangeReason?: ChangePasswordReason;
  passwordChangeRequired?: boolean;
  passwordLastUpdateInstant?: number;
  salt?: string;
  verified?: boolean;
}

/**
 * @author Daniel DeGroff
 */
export interface SendRequest {
  bccAddresses?: Array<string>;
  ccAddresses?: Array<string>;
  requestData?: Record<string, any>;
  userIds?: Array<UUID>;
}

/**
 * @author Daniel DeGroff
 */
export interface SendResponse {
  results?: Record<UUID, EmailTemplateErrors>;
}

/**
 * @author Daniel DeGroff
 */
export enum Sort {
  asc,
  desc
}

/**
 * @author Daniel DeGroff
 */
export interface SortField {
  missing?: string;
  name?: string;
  order?: Sort;
}

/**
 * @author Brian Pontarelli
 */
export interface SystemConfiguration {
  auditLogConfiguration?: AuditLogConfiguration;
  cookieEncryptionIV?: string;
  cookieEncryptionKey?: string;
  corsConfiguration?: CORSConfiguration;
  data?: Record<string, any>;
  eventLogConfiguration?: EventLogConfiguration;
  loginRecordConfiguration?: LoginRecordConfiguration;
  reportTimezone?: string;
  uiConfiguration?: UIConfiguration;
}

/**
 * Request for the system configuration API.
 *
 * @author Brian Pontarelli
 */
export interface SystemConfigurationRequest {
  systemConfiguration?: SystemConfiguration;
}

/**
 * Response for the system configuration API.
 *
 * @author Brian Pontarelli
 */
export interface SystemConfigurationResponse {
  systemConfiguration?: SystemConfiguration;
}

/**
 * @author Daniel DeGroff
 */
export interface SystemLogsExportRequest extends BaseExportRequest {
  lastNBytes?: number;
}

export interface Templates {
  emailComplete?: string;
  emailSend?: string;
  emailVerify?: string;
  helpers?: string;
  oauth2Authorize?: string;
  oauth2ChildRegistrationNotAllowed?: string;
  oauth2ChildRegistrationNotAllowedComplete?: string;
  oauth2CompleteRegistration?: string;
  oauth2Device?: string;
  oauth2DeviceComplete?: string;
  oauth2Error?: string;
  oauth2Logout?: string;
  oauth2Passwordless?: string;
  oauth2Register?: string;
  oauth2TwoFactor?: string;
  oauth2Wait?: string;
  passwordChange?: string;
  passwordComplete?: string;
  passwordForgot?: string;
  passwordSent?: string;
  registrationComplete?: string;
  registrationSend?: string;
  registrationVerify?: string;
}

/**
 * @author Daniel DeGroff
 */
export interface Tenant {
  configured?: boolean;
  data?: Record<string, any>;
  emailConfiguration?: EmailConfiguration;
  eventConfiguration?: EventConfiguration;
  externalIdentifierConfiguration?: ExternalIdentifierConfiguration;
  failedAuthenticationConfiguration?: FailedAuthenticationConfiguration;
  familyConfiguration?: FamilyConfiguration;
  httpSessionMaxInactiveInterval?: number;
  id?: UUID;
  issuer?: string;
  jwtConfiguration?: JWTConfiguration;
  logoutURL?: string;
  maximumPasswordAge?: MaximumPasswordAge;
  minimumPasswordAge?: MinimumPasswordAge;
  name?: string;
  passwordEncryptionConfiguration?: PasswordEncryptionConfiguration;
  passwordValidationRules?: PasswordValidationRules;
  themeId?: UUID;
  userDeletePolicy?: TenantUserDeletePolicy;
}

/**
 * @author Brian Pontarelli
 */
export interface Tenantable {
}

/**
 * @author Daniel DeGroff
 */
export interface TenantRequest {
  sourceTenantId?: UUID;
  tenant?: Tenant;
}

/**
 * @author Daniel DeGroff
 */
export interface TenantResponse {
  tenant?: Tenant;
  tenants?: Array<Tenant>;
}

/**
 * A Tenant-level policy for deleting Users.
 *
 * @author Trevor Smith
 */
export interface TenantUserDeletePolicy {
  unverified?: TimeBasedDeletePolicy;
}

/**
 * @author Daniel DeGroff
 */
export interface TestEvent extends BaseEvent {
  message?: string;
}

/**
 * @author Trevor Smith
 */
export interface Theme {
  data?: Record<string, any>;
  defaultMessages?: string;
  id?: UUID;
  insertInstant?: number;
  lastUpdateInstant?: number;
  localizedMessages?: LocalizedStrings;
  name?: string;
  stylesheet?: string;
  templates?: Templates;
}

/**
 * Theme API request object.
 *
 * @author Trevor Smith
 */
export interface ThemeRequest {
  sourceThemeId?: UUID;
  theme?: Theme;
}

/**
 * Theme API response object.
 *
 * @author Trevor Smith
 */
export interface ThemeResponse {
  theme?: Theme;
  themes?: Array<Theme>;
}

/**
 * A policy for deleting Users.
 *
 * @author Trevor Smith
 */
export interface TimeBasedDeletePolicy extends Enableable {
  numberOfDaysToRetain?: number;
}

/**
 * <ul>
 * <li>Bearer Token type as defined by <a href="https://tools.ietf.org/html/rfc6750">RFC 6750</a>.</li>
 * <li>MAC Token type as referenced by <a href="https://tools.ietf.org/html/rfc6749">RFC 6749</a> and
 * <a href="https://tools.ietf.org/html/draft-ietf-oauth-v2-http-mac-05">
 * Draft RFC on OAuth 2.0 Message Authentication Code (MAC) Tokens</a>
 * </li>
 * </ul>
 *
 * @author Daniel DeGroff
 */
export enum TokenType {
  Bearer,
  MAC
}

export interface Totals {
  logins?: number;
  registrations?: number;
  totalRegistrations?: number;
}

/**
 * The response from the total report. This report stores the total numbers for each application.
 *
 * @author Brian Pontarelli
 */
export interface TotalsReportResponse {
  applicationTotals?: Record<UUID, Totals>;
  globalRegistrations?: number;
  totalGlobalRegistrations?: number;
}

/**
 * The transaction types for Webhooks and other event systems within FusionAuth.
 *
 * @author Brian Pontarelli
 */
export enum TransactionType {
  None,
  Any,
  SimpleMajority,
  SuperMajority,
  AbsoluteMajority
}

/**
 * Twilio Service Configuration.
 *
 * @author Daniel DeGroff
 */
export interface TwilioConfiguration extends Enableable {
  accountSID?: string;
  authToken?: string;
  fromPhoneNumber?: string;
  messagingServiceSid?: string;
  url?: string;
}

/**
 * @author Daniel DeGroff
 */
export interface TwitterApplicationConfiguration extends BaseIdentityProviderApplicationConfiguration {
  buttonText?: string;
  consumerKey?: string;
  consumerSecret?: string;
}

/**
 * Twitter social login provider.
 *
 * @author Daniel DeGroff
 */
export interface TwitterIdentityProvider extends BaseIdentityProvider<TwitterApplicationConfiguration> {
  buttonText?: string;
  consumerKey?: string;
  consumerSecret?: string;
}

/**
 * @author Daniel DeGroff
 */
export enum TwoFactorDelivery {
  None,
  TextMessage
}

/**
 * @author Daniel DeGroff
 */
export interface TwoFactorLoginRequest extends BaseLoginRequest {
  code?: string;
  trustComputer?: boolean;
  twoFactorId?: string;
}

/**
 * @author Brian Pontarelli
 */
export interface TwoFactorRequest {
  code?: string;
  delivery?: TwoFactorDelivery;
  secret?: string;
  secretBase32Encoded?: string;
}

/**
 * @author Daniel DeGroff
 */
export interface TwoFactorSendRequest {
  mobilePhone?: string;
  secret?: string;
  userId?: UUID;
}

export interface UIConfiguration {
  headerColor?: string;
  logoURL?: string;
  menuFontColor?: string;
}

/**
 * The global view of a User. This object contains all global information about the user including birth date, registration information
 * preferred languages, global attributes, etc.
 *
 * @author Seth Musselman
 */
export interface User extends SecureIdentity {
  active?: boolean;
  birthDate?: string;
  cleanSpeakId?: UUID;
  data?: Record<string, any>;
  email?: string;
  expiry?: number;
  firstName?: string;
  fullName?: string;
  imageUrl?: string;
  insertInstant?: number;
  lastLoginInstant?: number;
  lastName?: string;
  memberships?: Array<GroupMember>;
  middleName?: string;
  mobilePhone?: string;
  parentEmail?: string;
  preferredLanguages?: Array<string>;
  registrations?: Array<UserRegistration>;
  tenantId?: UUID;
  timezone?: string;
  twoFactorDelivery?: TwoFactorDelivery;
  twoFactorEnabled?: boolean;
  twoFactorSecret?: string;
  username?: string;
  usernameStatus?: ContentStatus;
}

/**
 * An action that can be executed on a user (discipline or reward potentially).
 *
 * @author Brian Pontarelli
 */
export interface UserAction {
  active?: boolean;
  cancelEmailTemplateId?: UUID;
  endEmailTemplateId?: UUID;
  id?: UUID;
  includeEmailInEventJSON?: boolean;
  localizedNames?: LocalizedStrings;
  modifyEmailTemplateId?: UUID;
  name?: string;
  options?: Array<UserActionOption>;
  preventLogin?: boolean;
  sendEndEvent?: boolean;
  startEmailTemplateId?: UUID;
  temporal?: boolean;
  transactionType?: TransactionType;
  userEmailingEnabled?: boolean;
  userNotificationsEnabled?: boolean;
}

/**
 * Models the user action event (and can be converted to JSON).
 *
 * @author Brian Pontarelli
 */
export interface UserActionEvent extends BaseEvent {
  action?: string;
  actioneeUserId?: UUID;
  actionerUserId?: UUID;
  actionId?: UUID;
  applicationIds?: Array<UUID>;
  comment?: string;
  email?: Email;
  emailedUser?: boolean;
  expiry?: number;
  localizedAction?: string;
  localizedDuration?: string;
  localizedOption?: string;
  localizedReason?: string;
  notifyUser?: boolean;
  option?: string;
  phase?: UserActionPhase;
  reason?: string;
  reasonCode?: string;
}

/**
 * A log for an action that was taken on a User.
 *
 * @author Brian Pontarelli
 */
export interface UserActionLog {
  actioneeUserId?: UUID;
  actionerUserId?: UUID;
  applicationIds?: Array<UUID>;
  comment?: string;
  createInstant?: number;
  emailUserOnEnd?: boolean;
  endEventSent?: boolean;
  expiry?: number;
  history?: LogHistory;
  id?: UUID;
  localizedName?: string;
  localizedOption?: string;
  localizedReason?: string;
  name?: string;
  notifyUserOnEnd?: boolean;
  option?: string;
  reason?: string;
  reasonCode?: string;
  userActionId?: UUID;
}

/**
 * Models content user action options.
 *
 * @author Brian Pontarelli
 */
export interface UserActionOption {
  localizedNames?: LocalizedStrings;
  name?: string;
}

/**
 * The phases of a time-based user action.
 *
 * @author Brian Pontarelli
 */
export enum UserActionPhase {
  start,
  modify,
  cancel,
  end
}

/**
 * Models action reasons.
 *
 * @author Brian Pontarelli
 */
export interface UserActionReason {
  code?: string;
  id?: UUID;
  localizedTexts?: LocalizedStrings;
  text?: string;
}

/**
 * User Action Reason API request object.
 *
 * @author Brian Pontarelli
 */
export interface UserActionReasonRequest {
  userActionReason?: UserActionReason;
}

/**
 * User Action Reason API response object.
 *
 * @author Brian Pontarelli
 */
export interface UserActionReasonResponse {
  userActionReason?: UserActionReason;
  userActionReasons?: Array<UserActionReason>;
}

/**
 * User Action API request object.
 *
 * @author Brian Pontarelli
 */
export interface UserActionRequest {
  userAction?: UserAction;
}

/**
 * User Action API response object.
 *
 * @author Brian Pontarelli
 */
export interface UserActionResponse {
  userAction?: UserAction;
  userActions?: Array<UserAction>;
}

/**
 * Models the User Bulk Create Event (and can be converted to JSON).
 *
 * @author Brian Pontarelli
 */
export interface UserBulkCreateEvent extends BaseEvent {
  users?: Array<User>;
}

/**
 * A log for an event that happened to a User.
 *
 * @author Brian Pontarelli
 */
export interface UserComment {
  comment?: string;
  commenterId?: UUID;
  createInstant?: number;
  id?: UUID;
  userId?: UUID;
}

/**
 * @author Seth Musselman
 */
export interface UserCommentRequest {
  userComment?: UserComment;
}

/**
 * User Comment Response
 *
 * @author Seth Musselman
 */
export interface UserCommentResponse {
  userComment?: UserComment;
  userComments?: Array<UserComment>;
}

/**
 * Models a User consent.
 *
 * @author Daniel DeGroff
 */
export interface UserConsent {
  consent?: Consent;
  consentId?: UUID;
  data?: Record<string, any>;
  giverUserId?: UUID;
  id?: UUID;
  insertInstant?: number;
  lastUpdateInstant?: number;
  status?: ConsentStatus;
  userId?: UUID;
  values?: Array<string>;
}

/**
 * API response for User consent.
 *
 * @author Daniel DeGroff
 */
export interface UserConsentRequest {
  userConsent?: UserConsent;
}

/**
 * API response for User consent.
 *
 * @author Daniel DeGroff
 */
export interface UserConsentResponse {
  userConsent?: UserConsent;
  userConsents?: Array<UserConsent>;
}

/**
 * Models the User Create Event (and can be converted to JSON).
 *
 * @author Brian Pontarelli
 */
export interface UserCreateEvent extends BaseEvent {
  user?: User;
}

/**
 * Models the User Deactivate Event (and can be converted to JSON).
 *
 * @author Brian Pontarelli
 */
export interface UserDeactivateEvent extends BaseEvent {
  user?: User;
}

/**
 * Models the User Event (and can be converted to JSON) that is used for all user modifications (create, update,
 * delete).
 *
 * @author Brian Pontarelli
 */
export interface UserDeleteEvent extends BaseEvent {
  user?: User;
}

/**
 * User API delete request object.
 *
 * @author Daniel DeGroff
 */
export interface UserDeleteRequest {
  dryRun?: boolean;
  hardDelete?: boolean;
  query?: string;
  queryString?: string;
  userIds?: Array<UUID>;
}

/**
 * User API bulk response object.
 *
 * @author Trevor Smith
 */
export interface UserDeleteResponse {
  dryRun?: boolean;
  hardDelete?: boolean;
  total?: number;
  userIds?: Array<string>;
}

/**
 * Models the User Email Verify Event (and can be converted to JSON).
 *
 * @author Trevor Smith
 */
export interface UserEmailVerifiedEvent extends BaseEvent {
  user?: User;
}

/**
 * @author Daniel DeGroff
 */
export interface UserinfoResponse extends Record<string, any> {
}

/**
 * Models the User Login Failed Event.
 *
 * @author Daniel DeGroff
 */
export interface UserLoginFailedEvent extends BaseEvent {
  applicationId?: UUID;
  authenticationType?: string;
  user?: User;
}

/**
 * Models the User Login Success Event.
 *
 * @author Daniel DeGroff
 */
export interface UserLoginSuccessEvent extends BaseEvent {
  applicationId?: UUID;
  authenticationType?: string;
  identityProviderId?: UUID;
  identityProviderName?: string;
  user?: User;
}

export interface UsernameModeration extends Enableable {
  applicationId?: UUID;
}

/**
 * Models the User Password Breach Event.
 *
 * @author Matthew Altman
 */
export interface UserPasswordBreachEvent extends BaseEvent {
  user?: User;
}

/**
 * Models the User Reactivate Event (and can be converted to JSON).
 *
 * @author Brian Pontarelli
 */
export interface UserReactivateEvent extends BaseEvent {
  user?: User;
}

/**
 * User registration information for a single application.
 *
 * @author Brian Pontarelli
 */
export interface UserRegistration {
  applicationId?: UUID;
  authenticationToken?: string;
  cleanSpeakId?: UUID;
  data?: Record<string, any>;
  id?: UUID;
  insertInstant?: number;
  lastLoginInstant?: number;
  preferredLanguages?: Array<string>;
  roles?: Array<string>;
  timezone?: string;
  tokens?: Record<string, string>;
  username?: string;
  usernameStatus?: ContentStatus;
  verified?: boolean;
}

/**
 * Models the User Create Registration Event (and can be converted to JSON).
 *
 * @author Daniel DeGroff
 */
export interface UserRegistrationCreateEvent extends BaseEvent {
  applicationId?: UUID;
  registration?: UserRegistration;
  user?: User;
}

/**
 * Models the User Delete Registration Event (and can be converted to JSON).
 *
 * @author Daniel DeGroff
 */
export interface UserRegistrationDeleteEvent extends BaseEvent {
  applicationId?: UUID;
  registration?: UserRegistration;
  user?: User;
}

/**
 * Models the User Update Registration Event (and can be converted to JSON).
 *
 * @author Daniel DeGroff
 */
export interface UserRegistrationUpdateEvent extends BaseEvent {
  applicationId?: UUID;
  original?: UserRegistration;
  registration?: UserRegistration;
  user?: User;
}

/**
 * Models the User Registration Verified Event (and can be converted to JSON).
 *
 * @author Trevor Smith
 */
export interface UserRegistrationVerifiedEvent extends BaseEvent {
  applicationId?: UUID;
  registration?: UserRegistration;
  user?: User;
}

/**
 * User API request object.
 *
 * @author Brian Pontarelli
 */
export interface UserRequest {
  sendSetPasswordEmail?: boolean;
  skipVerification?: boolean;
  user?: User;
}

/**
 * User API response object.
 *
 * @author Brian Pontarelli
 */
export interface UserResponse {
  token?: string;
  user?: User;
}

/**
 * This class is the user query. It provides a build pattern as well as public fields for use on forms and in actions.
 *
 * @author Brian Pontarelli
 */
export interface UserSearchCriteria extends BaseSearchCriteria {
  ids?: Array<UUID>;
  query?: string;
  queryString?: string;
  sortFields?: Array<SortField>;
}

/**
 * @author Daniel DeGroff
 */
export enum UserState {
  Authenticated,
  AuthenticatedNotRegistered
}

/**
 * Models the User Update Event (and can be converted to JSON).
 *
 * @author Brian Pontarelli
 */
export interface UserUpdateEvent extends BaseEvent {
  original?: User;
  user?: User;
}

/**
 * @author Daniel DeGroff
 */
export interface ValidateResponse {
  jwt?: JWT;
}

/**
 * @author Daniel DeGroff
 */
export interface VerifyEmailResponse {
  verificationId?: string;
}

/**
 * @author Daniel DeGroff
 */
export interface VerifyRegistrationResponse {
  verificationId?: string;
}

/**
 * A server where events are sent. This includes user action events and any other events sent by FusionAuth.
 *
 * @author Brian Pontarelli
 */
export interface Webhook {
  applicationIds?: Array<UUID>;
  connectTimeout?: number;
  data?: Record<string, any>;
  description?: string;
  eventsEnabled?: Record<EventType, boolean>;
  global?: boolean;
  headers?: HTTPHeaders;
  httpAuthenticationPassword?: string;
  httpAuthenticationUsername?: string;
  id?: UUID;
  readTimeout?: number;
  sslCertificate?: string;
  url?: string;
}

/**
 * Webhook API request object.
 *
 * @author Brian Pontarelli
 */
export interface WebhookRequest {
  webhook?: Webhook;
}

/**
 * Webhook API response object.
 *
 * @author Brian Pontarelli
 */
export interface WebhookResponse {
  webhook?: Webhook;
  webhooks?: Array<Webhook>;
}

